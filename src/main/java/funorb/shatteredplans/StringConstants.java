package funorb.shatteredplans;

import funorb.Strings;
import funorb.cache.ResourceLoader;
import funorb.client.lobby.ReportAbuseDialog;

import java.util.function.Consumer;

public final class StringConstants {
  public static final String[] RESOURCE_NAMES = new String[]{"Metal", "Biomass", "Energy", "Exotics"};
  public static final String[] INSTRUCTIONS_TABNAMES = new String[]{"Overview", "Glossary I", "Glossary II", "Tactical Display", "System HUD", "Controls I", "Controls II", "Animations", "Projects", "Game Types", "Classic Rules"};
  public static final String[] TOOLTIP_INCOME = new String[]{"Metal income in this territory.", "Biomass income in this territory.", "Energy income in this territory.", "Exotics income in this territory."};
  public static final String[] ACHIEVEMENT_NAMES = new String[]{"Hammer Blow", "Crushing Assault", "Decisive Strike", "Valiant Defence", "Unchecked Expansion", "Rapid Expansion", "Explosive Growth", "Man of Peace", "Total War", "Coordinated Assault", "Historian", "Lightning War", "Historical Footnote", "Renowned Leader", "Legendary Leader", "Feared Warlord", "Fabled Emperor", "Unassailable Grip", "Vast Empire", "Archaeologist", "Master Tactician", "Thronecrusher", "Man of Science", "New Galactic Order", "Oracle of Time"};
  public static final String[] HS_MODE_NAMES = new String[]{"All scores", "My scores", "Best each"};
  public static final String[] ACHIEVEMENT_CRITERIA = new String[]{"Attack with 95% of your forces (minimum 50 fleets) against a single enemy system.", "Assault an enemy system with 10 times as many fleets (minimum 50) as are defending it.", "Damage or destroy 100 fleets in one turn.", "Hold a system against attack from three or more systems in the same turn.", "Win a game, taking at least one system per turn throughout.", "Take five systems in one turn.", "Take eight systems in one turn.", "Have a treaty with all players simultaneously, then go on to win the game (minimum: 4 players).", "Win a game, having never signed a treaty (minimum: 4 players).", "Attack an enemy system with aid from an ally.", "Be holding at least 2 neutral homeworlds at the start of turn 8.", "Win a Conquest game in 20 turns or fewer (minimum: 4 players).", "Win 5 Rated games.", "Win 10 Rated games.", "Win 25 Rated games.", "Win 50 Rated games.", "Win 100 Rated games.", "Win a Capture and Hold game without anyone else ever capturing Sol (minimum: 4 players).", "Win a Points game before anyone else reaches 80% of the target score (minimum: 4 players).", "Own all derelicts on the map at once (minimum: 4 players).", "Win a Rated game of each type consecutively.", "Own all player homeworlds simultaneously (minimum: 4 players).", "Deploy all four projects in one turn.", "Defeat a JMod, or someone else who has this achievement.", "Deploy your projects when the time is right."};
  public static final String[] RATING_MODE_NAMES = new String[]{"By rating", "By win percentage"};
  public static final String[] TURN_NAMES_1 = new String[]{"Shattered", "Freezing", "Scorching", "Lost", "Cold", "Sundered", "Burning", "Wandering", "Enduring", "Ancient", "Chaos", "Potent", "Reborn", "Unseen", "Golden", "Beckoning", "Silent", "Waning", "Dancing", "Quantum", "Glittering", "Blackened"};
  public static final String[] GAMEOPT_LABELS = new String[]{"Maximum AI players", "Turn Time (seconds)", "Game Type", "Galaxy Size", "Ruleset", "Movement Range"};
  public static final String[][] GAMEOPT_NAMES = new String[][]{new String[0], {"300", "180", "120", "90", "60", "45", "30"}, {"Conquest", "Sol", "Points", "Derelicts"}, {"Huge", "Large", "Medium", "Small", "Tiny"}, {"Streamlined", "Classic"}};
  public static final String[] PROJECT_NAMES = new String[]{"Defensive Net", "Terraforming", "Stellar Bomb", "Tannh√§user Project"};
  public static final String[] TURN_NAMES_2 = new String[]{"<%0> Souls", "<%0> Ships", "<%0> Suns", "the <%0> Moon", "<%0> Peace", "the <%0> War", "<%0> Stars", "the <%0> People", "the <%0> Lights", "the <%0> Gate", "<%0> Empires", "<%0> Worlds", "<%0> Shadow", "<%0> Thunder", "the <%0> Storm", "<%0> Night", "<%0> Triumphs", "<%0> Steel", "<%0> Dreams"};
  public static final String[] QUICK_CHAT_SHORTCUT_KEYS = new String[]{"[BACKSPACE]", "[HOME]", "[F9]", "[F10]", "[F11]", "[ESC]"};
  public static final String[][] AI_CHAT = new String[][]{{"We will not bow before such as you."}, {"We cannot ally with any who call <%largestplayer> a friend."}, {"You do not have sufficient might to deserve that honour."}, {"An alliance with <%you> does not fit into our expansion plans."}, {"While we could of course defeat you easily, the forces on our borders can be better used elsewhere."}, {"Agreed. Let <%largestplayer> tremble before our combined might."}, {"We shall stand together in the battles ahead."}, {"The forces deployed on our borders could be put to better use. Let us sign a non-agression pact immediately."}, {"Join with us, and together we can end the tyranny of <%largestplayer>."}, {"Unite with us; our two nations together as one would be a power unmatched."}, {"A wise decision. Such profitless conflict serves neither of us."}, {"Excellent. We will begin mobilizing our forces against <%largestplayer> immediately."}, {"Excellent. Let us coordinate our battle plans."}, {"Time has yet to erase the mistakes of <%you>."}, {"The <%me> claims this portion of the galaxy. Defend yourself."}, {"The <%me> shall guard its borders carefully."}, {"We are the <%me>, and we are prepared for combat."}, {"The <%me> looks forward to an era of enlightened peace and prosperity."}, {"Do not attempt to interfere with the plans of <%me>."}, {"These resources will be of use in the struggle ahead.", "The citizens of <%system> are adjusting well to their new leadership."}, {"The defences at <%system> are strong indeed."}, {"<%system> will remain mine for all time!"}, {"Attacking <%system> was a tactical error."}, {"<%system> would be a prize indeed."}, {"You have no chance to survive, make your time.", "Your fall is now inevitable.", "Rest assured - your cultural artefacts will be preserved after your civilization collapses."}, {"No! This will not be tolerated!"}, {"Cease this useless violence!"}};
  public static final String[] TEXT_ORDINALS = new String[]{"1st", "2nd", "3rd", "4th", "5th", "6th"};
  public static final String[] AI_TYPES = new String[]{"(Old) Standard", "(Old) Cautious", "Tutorial", "Standard", "Aggressive", "Reckless", "Isolationist", "Defensive", "Task"};
  public static final String[] GAME_TYPE_TOOLTIPS = new String[]{"Destroy all opposition to reign supreme.", "Capture and hold Sol to earn points. Most points after 20 turns wins.", "Capture and hold systems to earn points.", "Capture derelict alien ships and research their secrets."};
  public static final String[] RULESET_TOOLTIPS = new String[]{"No garrisoning, production unified across territories.", "Garrisoning required, separate production per territory."};
  public static final String[] TEXT_INTRO_0 = new String[]{"New Cambridge Colony", "Historical Archives"};
  public static final String[] QUICK_CHAT_SHORTCUT_HELP = new String[]{"Move back to the previous menu level.", "Return to the top level of the menu.", "Auto-respond to the last thing in your chat window.", "Open the Quick Chat menu.", "Repeat the last thing you said.", "Close the Quick Chat menu."};
  public static final String[] EMPIRE_NAMES = new String[]{"Red Coalition", "Green Empire", "Blue Confederacy", "Magenta Union", "Yellow Imperium", "Cyan League"};
  public static String DERELICT = "Derelict";
  public static String TEXT_STAT_SHIPS_LOST = "Fleets lost";
  public static String CREATE_ALERT_NAME_CHARS = "Names can only contain letters, numbers, spaces and underscores";
  public static String VICTORY_TURNS_REMAINING = "Turns remaining: <%0>";
  public static String CREATE_ALERT_INVALID_AGE = "Please enter your age in years";
  public static String CREATE_ALERT_PASS_REPEATED = "This password contains repeated characters, and would be easy to guess";
  public static String CREATE_ALERT_PASS_LENGTH = "Passwords must be between 5 and 20 characters long";
  public static String CREATE_EMAIL_TOOLTIP = "Your email address is used to identify this account";
  public static String CREATE_PASSWORD_HINT = "Passwords must be between 5 and 20 letters and numbers";
  public static String CREATE_PASSWORD = "Password: ";
  public static String BACK = "Back";
  public static String RETRY = "Retry";
  public static String TEXT_INTRO_3_START = "A fortunate few found more habitable planets and, around this handful of stars, civilization began to flourish once again.";
  public static String VISIT_ACCOUNT_MANAGEMENT = "Visit the Account Management section on the main site to view.";
  public static String DONT_TELL_PASSWORD = "You appear to be telling someone your password - please don't!";
  public static String CONNECTION_RESTORED = "Connection restored.";
  public static String TEXT_STAT_ATTACKS_SUCCESSFUL = "Successful attacks";
  public static String ACCOUNT_CREATED_SUCCESSFULLY = "Account created successfully!";
  public static String TEXT_INSTRUCTIONS_GLOSSARY_1 = "<%glossary>FLEET</col> - A collection of ships<br><br><%glossary>SYSTEM</col> - A star and its related planets. <%glossary>Systems</col> are always controlled by a single player and only that player can have <%glossary>fleets</col> stationed there. If another player's fleet enters the system, the two fleets engage in combat until one remains.<br><br><%glossary>NEUTRAL</col> - A <%glossary>system</col> not under the control of any player. <%glossary>Neutral</col> systems never attack and do not produce fleets.<br><br><%glossary>WORMHOLE</col> - <%glossary>Systems</col> are connected by <%glossary>wormholes</col>, which fleets use to move between systems. Fleets can jump along a single wormhole link per turn in <%glossary>neutral</col> or hostile systems, but can chain jumps together in systems you control.<br><br><%glossary>RESOURCE</col> - There are four types of <%glossary>resource</col> in <%highlight>Shattered Plans</col>: <%resource0>, <%resource1>, <%resource2> and <%resource3>, and they are used to construct fleets and <%highlight>projects</col>.<br><br>";
  public static String CREATE_USERNAME_AVAILABLE = "Name is available";
  public static String OK = "OK";
  public static String TAB_NAME_FLEET_INFO = "Fleet Info";
  public static String STATUS = "Status";
  public static String MU_X_CANNOT_JOIN_FULL = "<%0> cannot join; the game is full.";
  public static String FLEET_HAS_RETREATED_TO = "1 fleet has retreated to <%0>";
  public static String TEXT_INSTRUCTIONS_MV_WORMHOLE = "Wormhole indicator";
  public static String PLEASE_CHANGE_PASSWORD = "If you are not, please change your password to something more obscure!";
  public static String REMOVE_FROM_IGNORE_FIRST = "Please remove <%0> from your ignore list first.";
  public static String MU_ALL_PLAYERS_HAVE_LEFT = "All players have left <%0>'s game.";
  public static String CREATE_ALERT_NAME_LENGTH = "Names should contain a maximum of 12 characters";
  public static String GAMEOPT_PLAYER_NEEDS_1_RATED_GAME = "<%0> must play 1 more rated game before playing with the current options.";
  public static String WAITING_FOR_N_PLAYERS = "WAITING FOR <%0> PLAYERS.";
  public static String GAME_OPTS_CHANGED = "Game options changed (<%0>)";
  public static String MU_X_ENTERED_GAME = "<%0> has entered a game.";
  public static String PLEASE_WAIT = "Please wait...";
  public static String MU_X_JOINED_YOUR_GAME = "<%0> has joined your game.";
  public static String MU_GAMELIST_AVG_RATING = "Average rating";
  public static String WAITING_FOR_GRAPHICS = "Waiting for graphics";
  public static String MU_X_ENTERED_OTHER_GAME = "<%0> has entered another game.";
  public static String N_POINTS_1_PER_TURN = "<%0> points, 1 point per turn.";
  public static String MU_X_LEFT_LOBBY = "<%0> has left the lobby.";
  public static String MU_X_LOST_CON = "<%0> has lost connection.";
  public static String MU_X_CANNOT_JOIN_IN_PROGRESS = "<%0> cannot join; the game has started.";
  public static String MU_X_DECLINED_INVITE = "<%0> has declined the invitation.";
  public static String MESSAGE_LOBBY = "Message lobby";
  public static String RULE_PILLAR_2 = "Security";
  public static String MU_X_WITHDREW_REQUEST = "<%0> has withdrawn the request to join.";
  public static String MU_X_REMOVED = "<%0> has been removed.";
  public static String TEXT_SHIPS = "Fleets";
  public static String FS_UNAVAILABLE = "Unfortunately your configuration doesn't support fullscreen mode.";
  public static String COMM_IO_ERROR = "IO error - unable to communicate reliably with the data server. Please check any firewall/antivirus/filtering software.";
  public static String TUTORIAL_EXIT = "To return to the menu, press <%key>'ESC'</col> and select 'End Tutorial' from the menu.";
  public static String MU_X_DROPPED_OUT = "<%0> has dropped out.";
  public static String LOADING_EXTRA_DATA = "Loading extra data";
  public static String PASSWORD_IS_VALID = "Password is valid";
  public static String RULE_0_4 = "Scamming";
  public static String ACCEPT_PLAYER_INVITATION = "Accept invitation to <%0>'s game";
  public static String ONE_POINT_1_PER_TURN = "1 point, 1 point per turn.";
  public static String MU_LOBBY_LOCATION = "Location";
  public static String MU_REQUEST_DECLINED = "Your request to join has been declined.";
  public static String LOADING_GRAPHICS = "Loading graphics";
  public static String DISCARD = "Discard";
  public static String PENDING = "PENDING";
  public static String SHOWING_COMBAT_RESULTS = "Showing combat results.";
  public static String TAB_NAME_PROJECTS = "Projects";
  public static String CHANGE_DISPLAY_NAME = "Change display name";
  public static String MULTICONST_FRIENDS = "Friends";
  public static String MU_LOBBY_NAME = "Name";
  public static String CHECKING = "Checking";
  public static String GAMEOPT_CANNOT_BE_COMBINED_2 = "This option cannot be combined with the current settings for:  ";
  public static String CREATING_YOUR_ACCOUNT = "Creating your account";
  public static String SEARCHING_FOR_OPPONENTS = "Searching for opponents";
  public static String START_SKIRMISH = "Start skirmish";
  public static String TUTORIAL = "Tutorial";
  public static String TEXT_INSTRUCTIONS_CLASSIC = "The <%highlight>Classic Ruleset</col> adds some additional complexity to the game, and is only recommended for experienced players.<br><br><%glossary>GARRISON</col> - For each <%glossary>system</col>, at least one fleet per <%glossary>wormhole</col> link to a hostile or neutral territory needs to be garrisoned there, to maintain order. If the <%glossary>garrison</col> level falls below this, you may lose control of the system. Systems at risk of collapse are overlaid with <%highlight>yellow or red crosshatching</col>.<br><br><%glossary>PRODUCTION</col> - As with the normal rules, construction of one fleet requires one unit of each resource. If two regions that you control become disconnected, however, they are separated into distinct <%glossary>territories</col>, and they produce fleets independently using the resources they contain. Fleets produced by a territory can only be placed within that territory.";
  public static String INFO_RATED_GAME = "Here you can set up a rated game. If you win, your rating will go up. If<nbsp>you lose, it will go down!<br><br>Please specify your preferences and click '<%0>'. Our system will then attempt to find suitable opponents in under a minute, depending on how busy the lobby<nbsp>is.<br><br>This is an excellent way to get to know new people!";
  public static String TEXT_PEACE_3 = "All remaining colonies have agreed to a diplomatic settlement.";
  public static String RULE_2_1 = "Breaking real-world laws";
  public static String FIND_OPPONENTS = "Find opponents";
  public static String MU_GAME_IS_FULL = "This game is full.";
  public static String TEXT_JOIN = ", ";
  public static String TEXT_JOIN_FINAL = " and ";
  public static String SHOW_PLAYERS_IN_XS_GAME = "Show players in <%0>'s game";
  public static String TUTORIAL_BALANCED = "Our territory currently has balanced production, so you should seek to acquire all resources equally.";
  public static String CLICK_TO_QUICKCHAT = "Click or press F10 to open Quick Chat";
  public static String RULE_0_1 = "Encouraging rule breaking";
  public static String TUTORIAL_SHORTFALL1 = "Our territory is currently short of <%0>, so to build more fleets we should concentrate on acquiring ";
  public static String TUTORIAL_SHORTFALL_2B = "these resources.";
  public static String TEXT_STAT_DESC_FLUIDITY = "Percentage of fleets moved each turn (average for game).";
  public static String TUTORIAL_CONTINUE_2 = "When ready, press <col=2F5FBF>'ENTER'</col> to continue.";
  public static String TUTORIAL_SHORTFALL2A = "this resource.";
  public static String TOOLTIP_TOTAL_FLEET_PRODUCTION = "Total fleets produced in this territory this turn.";
  public static String MULTICONST_OPEN = "Open";
  public static String PACT_EXPIRES = "Expires in <%0> turns";
  public static String TEXT_INSTRUCTIONS_PROJECT_ENERGY = "<%PROJECT_ENERGY> - (<%Resource2>) A <%project_energy> causes devastating flares that destroy <%highlight>half of the fleet</col> in the target <%glossary>system</col>. If the target system has a <%project_metal>, the net will be destroyed instead. Additionally, any <%highlight>fleet moving out of the system is stopped</col>. This project <%highlight>may not be used against an ally</col> and you must control a system with a <%glossary>wormhole</col> link to the target.";
  public static String TEXT_INSTRUCTIONS_ANIMATION_PROJECT = "Project executed";
  public static String MU_GAME_HAS_STARTED = "This game has started.";
  public static String TEXT_INSTRUCTIONS_PROJECT_METAL = "<%PROJECT_METAL> - (<%Resource0>) A <%project_metal> fortifies a system. The fleet strength of the <%glossary>system</col>'s garrison is treated as <%highlight>double when defending</col>. This project may be used on any system you control.";
  public static String TEXT_ANIMATING_MOVES = "Showing production, projects and fleet movements.";
  public static String GAMEOPT_BADNUMPLAYERS = "You do not have a suitable number of players for the current options.";
  public static String TEXT_ANIMATING_COLLAPSE = "Showing system collapses.";
  public static String RULE_PILLAR_0 = "Honour";
  public static String TEXT_INSTRUCTIONS_SF_OUTGOING = "Outgoing fleet";
  public static String TEXT_ANIMATING_COMBAT = "Showing combat and damaged fleets retreating.";
  public static String TEXT_INSTRUCTIONS_FLEETSIZE = "<%highlight>FLEET RESIZING</col> - Once you have chosen a destination system for a move, you may <%highlight>increase or decrease</col> the number of <%glossary>fleets</col> you are sending there. This can be done via the <%highlight>tip of the arrow</col> at the destination system. Simply <%key>click</col> on the <%highlight>'+' button</col> by the arrowhead to increase how many fleets you are sending, or on the <%highlight>'-' button</col> to decrease it. Clicking the <%highlight>'X' button</col> will cancel the order completely.";
  public static String CREATE_SUGGESTIONS = "Suggested names: ";
  public static String TOOLTIP_ANIM_CLICK_TO_PLAY = "Click to replay animation.";
  public static String HINT_SELECT_SRC = "Select source star system to issue fleet orders.";
  public static String TEXT_INSTRUCTIONS_STATS = "<%highlight>STATISTICS SCREEN</col> - Pressing <%key>'SPACE'</col> will display a page showing statistics from the active colonies. Pressing <%key>'SPACE'</col> again will close it.";
  public static String GAMEOPT_YOU_HAVENT_UNLOCKED = "You have not yet unlocked this option for use.";
  public static String HINT_SELECT_DEST = "Select destination system in the same territory or connected by hyperspace link.";
  public static String CREATE_DISPLAYNAME_TOOLTIP = "Enter the name you'd prefer. This is the name displayed to other players.";
  public static String WARNING = "Warning";
  public static String MU_GAMEOPT_INVITE_X_TO_GAME = "Invite <%0> to this game";
  public static String HINT_DEFENSEGRID = "Select a friendly system to construct a defense grid, or right click to cancel this project.";
  public static String CREATE_ALERT_PASSCHARS = "Passwords can only contain letters and numbers";
  public static String FS_ACCEPT_BEFORE_ACCEPT = "Click";
  public static String HINT_PLACEMENT = "Place fleets in territory <%0> (<%1> remaining)";
  public static String HINT_TERRAFORM = "Select a friendly system to commence terraforming, or right click to cancel this project.";
  public static String HINT_FLARE = "Select a system adjacent to a friendly system to cause a destructive stellar flare, or right click to cancel this project.";
  public static String ACHIEVEMENTS_OFFLINE = "The Achievements system is currently unavailable.";
  public static String HINT_SELECT_GATE_SRC = "Select a friendly system to anchor one end of the Tannh√§user wormhole, or right click to cancel this project.";
  public static String HINT_SELECT_GATE_DEST = "Select a system to anchor the other end of the Tannh√§user wormhole, or right click to cancel this project.";
  public static String REPORT_X_FOR_ABUSE = "Report <%0> for abuse";
  public static String FRIEND_LIST_FULL = "Your friend list is full. Max of 100 for free users, and 200 for members.";
  public static String TOOLTIP_PLACE_FLEETS = "Click to build fleets in this territory.";
  public static String TOOLTIP_FLEETS_REMAINING = "<%0> fleets remaining.";
  public static String SEND_PM = "Send private message";
  public static String TOOLTIP_ONE_FLEET_REMAINING = "1 fleet remaining.";
  public static String MU_GAMEOPT_ACCEPT_X_INTO_GAME = "Accept <%0> into this game";
  public static String TEXT_PEACE_2 = "All colonies have agreed to a diplomatic settlement.";
  public static String TOOLTIP_ALL_FLEETS_PLACED = "No more fleets available here.";
  public static String TOOLTIP_ANIM_SPEED_IS_DOUBLE = "Animations speed is double. Click to halve.";
  public static String TOOLTIP_ANIM_SPEED_IS_NORMAL = "Animations speed is normal. Click to double.";
  public static String CREATE_EMAIL_CONFIRM = "Confirm Email:";
  public static String TOOLTIP_ANIM_CLICK_TO_STOP = "Click to stop animation.";
  public static String CREATE_SELECT_ALTERNATIVE = "Use this alternative as your account name";
  public static String MP_REMATCH_NEW_GAME = "Set up new game";
  public static String TOOLTIP_ANIM_AUTO_PLAY_IS_OFF = "Animations do not play automatically. Click to enable.";
  public static String RM_X_FROM_IGNORE = "Remove <%0> from ignore list";
  public static String SPECTATE_XS_GAME = "Spectate <%0>'s game";
  public static String TEXT_SHOW_CHAT = "C: Show Chat";
  public static String RA_SUGGEST_MUTE = "Suggest muting this player";
  public static String TOOLTIP_PRODUCTION_BUTTON_SHOW = "Click to show the Production window.";
  public static String RETURN_TO_GAME = "Return to game";
  public static String GAMEOPT_CANNOT_BE_COMBINED_1 = "This option cannot be combined with the current '<%0>' setting.";
  public static String YOUR_GAME = "Your game";
  public static String TEXT_INTRO_2_END = "Colonies were founded on a hundred worlds. Poorly equipped and without support, many failed. System after system was lost to the gathering night.";
  public static String TOOLTIP_PROJECTS_BUTTON_SHOW = "Click to show the Projects window.";
  public static String TEXT_INSTRUCTIONS_PROJECTS = "<%highlight>PROJECTS</col> - After collecting <%highlight>5</col> units of research of any one type, a project becomes available. To use a project, <%key>click</col> on the entry in the <%highlight>Projects window</col>, then <%key>click</col> on the target system(s). Each type of project has restrictions on its deployment, which will be explained when you've gathered enough resources to use it. When you use a project on a system, that system will be <%highlight>highlighted in the project's colour</col>, and a <%highlight>coloured pip</col> will appear above the system's defence strength.";
  public static String TEXT_INTRO_1_END = "Unfortunately, the exotic physics involved were not fully understood. At some point in 2137, a catastrophic test flight destabilised Earth's sun.";
  public static String TEXT_STAT_DESC_SHIPS_CONSTRUCTED = "Total number of fleets built.";
  public static String MOUSE_OVER_AN_ICON = "Mouse over an icon for details";
  public static String TOOLTIP_DIPLOMACY_BUTTON_SHOW = "Click to show the Diplomacy window.";
  public static String TOOLTIP_FLEET_INFO_BUTTON_SHOW = "Click to show the Fleet Info window.";
  public static String TEXT_SKIRMISH = "Single-player Skirmish";
  public static String TUTORIAL_CONTINUE = "Press <col=2F5FBF>'ENTER'</col> to continue.";
  public static String TOOLTIP_VICTORY_BUTTON_SHOW = "Click to show the Victory window.";
  public static String OPTIONS_MENU_NOT_PAUSED = "Options Menu";
  public static String TOOLTIP_PRODUCTION_BUTTON_HIDE = "Click to hide the Production window.";
  public static String SECRET_ACHIEVEMENT = "Secret achievement";
  public static String TOOLTIP_FLEET_INFO_BUTTON_HIDE = "Click to hide the Fleet Info window.";
  public static String KICK = "Kick";
  public static String CANCEL_DRAW = "Cancel draw";
  public static String TOOLTIP_DIPLOMACY_BUTTON_HIDE = "Click to hide the Diplomacy window.";
  public static String TOOLTIP_END_TURN = "Click to end turn.";
  public static String CREATE_CREATE_AN_ACCOUNT = "Create a free Account";
  public static String MU_GAMEOPT_KICK_X_FROM_THIS_GAME = "Kick <%0> from this game";
  public static String TEXT_WAITING_FOR_PLAYER = "WAITING FOR 1 PLAYER.";
  public static String TOOLTIP_PLACE_FLEET_STOP = "Click to stop building fleets in this territory.";
  public static String PACT_ACCEPT = "Accept NAP";
  public static String CREATE_EMAIL_CONFIRM_TOOLTIP = "Type your email address again to make sure it's correct";
  public static String LOGIN_USERNAME_TOOLTIP = "The account name you use to access RuneScape and other Jagex.com games";
  public static String ASKING_TO_JOIN_XS_GAME = "Asking to join <%0>'s game...";
  public static String SERVICE_UNAVAILABLE = "Service unavailable";
  public static String YOU_ARE_INVITED_TO_XS_GAME = "You are invited to <%0>'s game.";
  public static String TURN_NAME = "Year of <%0>";
  public static String RULE_PILLAR_1 = "Respect";
  public static String TEXT_DEFEAT = "DEFEAT!";
  public static String TEXT_INSTRUCTIONS_ICON_HOMEWORLD = "Colony homeworld";
  public static String MU_INVITE_PLAYERS = "Invite players";
  public static String LOGIN_USERNAME_EMAIL = "Login: ";
  public static String TEXT_INSTRUCTIONS_ANIMATION_FLEETMOVE = "Fleets in motion";
  public static String TEXT_OVERVIEW = "Overview";
  public static String TEXT_PRODUCTION = "Production";
  public static String TEXT_SYSTEMS = "Systems";
  public static String ERROR_JS5CRC = "CRC mismatch - unable to get a valid download. Please check any firewall/antivirus/filtering software.";
  public static String CREATE_ALERT_PASS_CONTAINS_NAME = "This password contains your Player Name, and would be easy to guess";
  public static String THIS_IS_RUNESCAPE_CLAN = "This is your RuneScape clan if you have one.";
  public static String CREATE_DISPLAY_NAME = "Player Name: ";
  public static String JUST_PLAY = "Just play";
  public static String FRIEND_LIST_DUPE = "<%0> is already on your friend list.";
  public static String TEXT_NO_ACHIEVEMENT = "No Achievement";
  public static String TEXT_STAT_DESC_RESEARCH_WASTED = "Amount of wasted research data.";
  public static String MESSAGE_GAME = "Message game";
  public static String TEXT_STAT_DESC_MAX_TOTAL_FLEET_SIZE = "Most fleets controlled at one time.";
  public static String QUICK_CHAT_HELP = "Quick Chat Help";
  public static String RULE_1_4 = "Real-life threats";
  public static String UNABLE_TO_DELETE_IGNORE = "Unable to delete name - system busy";
  public static String TAB_NAME_PRODUCTION = "Production";
  public static String VICTORY_TARGET_POINTS = "Target: <%0> points";
  public static String RATING_NO_RATINGS = "No players";
  public static String GAMEOPT_PLAYER_NEEDS_RATED_GAMES = "<%0> must play <%1> more rated games before playing with the current options.";
  public static String QUIT_TO_WEBSITE = "Quit to website";
  public static String TAB_NAME_DIPLOMACY = "Diplomacy";
  public static String TAB_NAME_VICTORY = "Victory";
  public static String TEXT_STAT_MAX_TOTAL_FLEET_SIZE = "Maximum total fleet size";
  public static String VICTORY_IN_X = "Victory in <%0>";
  public static String UNABLE_TO_DELETE_FRIEND = "Unable to delete friend - system busy";
  public static String TICKETING_X_UNREAD = "You have <%0> unread messages!";
  public static String TURN_FEWER_SHIPS = "<%0> fewer ships per turn";
  public static String MU_OPTIONS_ALLOW_SPECTATE = "Allow spectators?";
  public static String INVITE_DECLINE_XS_GAME = "Decline invitation to <%0>'s game";
  public static String TOOLTIP_WAIT_TREATY = "You have offered a Non-Agression Pact to <%0>.";
  public static String TEXT_READY = "READY";
  public static String QUIT = "Quit";
  public static String TUTORIAL_LOST_MULTIPLE = "you lost <%0> fleets in the attack";
  public static String RATED_MEMBERS_ONLY = "Rated games are available to members only. To become a member, please visit the 'Account' section of the website.";
  public static String TEXT_STAT_DESC_DEFENCES_SUCCESSFUL = "Battles won in friendly space.";
  public static String TAB_NAME_UI_OPTIONS = "Display Options";
  public static String TEXT_INSTRUCTIONS_GAME_TYPE = "Shattered Plans has <%highlight>four different game types</col>, each with a different <%glossary>victory condition</col>.<br><br><%highlight>CONQUEST</col> - This is the simplest type of game: destroy all opponents to achieve victory. Any of the other game types can also be won in this way.<br><br><%highlight>CAPTURE AND HOLD</col> - The game has a fixed length of <%highlight>20 turns</col>, and a fixed map layout. In the centre of the map is <%highlight>Sol</col> and the damaged remains of Earth. At the end of each turn, the player who owns Sol earns <%highlight>1 point</col>. At the end of the 20 turns, the surviving player with the highest score wins. <%glossary>Ties</col> are broken in favour of the player who owns Sol. If none of the tied players own Sol, they draw and the other players lose.<br><br><%highlight>POINTS</col> - Players earn points each turn for the <%glossary>systems</col> they own. <%glossary>Colony homeworlds</col> are worth <%highlight>3 points</col> each turn, <%glossary>neutral homeworlds</col> are worth <%highlight>2 points</col>, and other worlds are worth <%highlight>1 point</col> each. The first player to reach the target number of points, which varies depending on map size, wins the game.<br><br><%highlight>DERELICTS</col> - Several <%glossary>derelict alien objects</col> are scattered around the map. Capturing a derelict allows you to begin researching it, earning you points each turn. This research is expensive, however, and so owning a derelict <%highlight>reduces your income<col> in each <%glossary>resource</col>. The first player to reach the target of <%highlight>50 points</col> wins.<br><br>";
  public static String MU_CHAT_PM_FRIENDS_ONLY = "Only show private chat from my friends and opponents";
  public static String PLAYERS_X_OF_Y = "Players: <%0>/<%1>";
  public static String CREATE_ALERT_YEAR_RANGE = "Please enter a year between <%0> and <%1>";
  public static String INVITE = "Invite";
  public static String TEXT_PERCENTAGE = "<%0>%";
  public static String TEXT_INSTRUCTIONS_ANIMATION = "<%highlight>Turn animations</col> provide a brief overview of the events during the previous turn and play at the start of each turn by default. They can be disabled or replayed using the buttons at the <%highlight>bottom-right</col> of the screen.";
  public static String MU_GAMEOPT_REJECT_X_FROM_GAME = "Reject <%0> from this game";
  public static String TEXT_DECIMAL = ".";
  public static String OFFER_DRAW = "Offer draw";
  public static String ERROR_JS5_CONNECT = "Unable to connect to the data server. Please check any firewall you are using.";
  public static String YOU_CAN_ASK_TO_JOIN = "You can ask to join this game";
  public static String TEXT_STAT_DESC_ATTACKS_SUCCESSFUL = "Battles won in hostile space.";
  public static String INVITING_X = "Inviting <%0>";
  public static String RA_INTRO = "To report a player, click on the most suitable option from the Rules of Conduct. Please do not abuse this form.";
  public static String ACCEPT = "Accept";
  public static String MU_CHAT_FRIENDS = "Friends";
  public static String GAME_FULL = "Game full";
  public static String MU_CHAT_PM_SHOW_ALL = "Show all private chat";
  public static String MULTICONST_INVITE_ONLY = "Invite only";
  public static String TOOLTIP_PROJECT_COMPLETE = "Project is complete. Click to place.";
  public static String LOADING = "Loading...";
  public static String TEXT_INSTRUCTIONS_ANIMATION_DAMAGED = "Fleets fleeing combat or collapsing system<br><col=2F5FBF>(Damaged arrowhead)</col>";
  public static String PLEASE_TRY_AGAIN = "Please try again in a few minutes.";
  public static String RATING_DRAWN = "Drawn";
  public static String TURN_ORDINAL = "Turn: <%0>";
  public static String TEXT_INSTRUCTIONS_MV_ORDER = "Pending fleet order";
  public static String MP_X_HAS_LEFT = "<%0> has left.";
  public static String TURN_POINTS = "<%0> points per turn";
  public static String PACT_OFFER = "Offer NAP";
  public static String RULE_2_2 = "Advertising websites";
  public static String WAITING_TO_START_HINT = "Hint: to start quickly, choose 'Don't mind' for as many options as you can!";
  public static String MU_CHAT_LOBBY_FRIENDS_ONLY = "Only show lobby chat from my friends";
  public static String MP_X_OFFERS_REMATCH = "<%0> is offering a rematch.";
  public static String ACCEPT_DRAW = "Accept draw";
  public static String TUTORIAL_LOST_NONE = "you lost 0 fleets in the attack";
  public static String TEXT_RESIGNED = "Resigned";
  public static String XS_GAME = "<%0>'s game";
  public static String MU_CHAT_GAME_FRIENDS_ONLY = "Only show game chat from my friends";
  public static String IDLE_MESSAGE_20_MIN = "We closed the connection because the game was left unattended for 20 minutes. Please feel free to reconnect immediately if you are there.";
  public static String YES = "Yes";
  public static String CREATE_PASSWORD_CONFIRM_TOOLTIP = "Type your password again to make sure it's correct";
  public static String CHAT_VIEW_SCROLLED_UP = "Chat view has been scrolled up. Scroll down to chat.";
  public static String LOGIN_GAME_UPDATED = "This game has been updated! Please reload this page.";
  public static String PRIVATE_CHAT_FRIEND_OFFLINE = "You cannot chat to <%0> because <%0> is offline in your friend list.";
  public static String JOIN_WITHDRAW_REQUEST_XS_GAME = "Withdraw request to join <%0>'s game";
  public static String CREATE_OPT_IN_NEWS_TOOLTIP = "Updates will sent to the email address you've given";
  public static String TEXT_INSTRUCTIONS_SF_GARRISON = "System defensive strength";
  public static String TURN_OBJECTIVE = "Objective";
  public static String MU_CHAT_LOBBY = "Lobby";
  public static String MU_OPTIONS = "Game options";
  public static String TEXT_REMOVED_FROM_GAME = "Sorry, you were removed from the game you were in. This can happen if you are disconnected for too long or if the server is updated.";
  public static String TEXT_STAT_DESC_AGGRESSIVENESS = "Percentage of fleets attacking each turn (average for game).";
  public static String LOGIN_NO_DISPLAY_NAME = "You need to choose a name before you can log in. This is the name that will be displayed to other players.";
  public static String MU_REQUEST_WITHDRAWN = "You have withdrawn your request to join.";
  public static String MU_CREATE_UNRATED = "Create unrated game";
  public static String TUTORIAL_LOST_SINGLE = "you lost 1 fleet in the attack";
  public static String OPEN_IN_POPUP_WINDOW = "Open in popup window";
  public static String LOGIN_JUST_PLAY_TOOLTIP = "Play the game without logging in just yet";
  public static String TURN_NAME_FIRST = "Year of Great Beginnings";
  public static String MP_X_HAS_RESIGNED = "<%0> has resigned.";
  public static String UNRATED_GAME = "Unrated game";
  public static String DOB_ENTER_FOR_CHAT = "Please enter your date of birth to enable chat:";
  public static String TEXT_INSTRUCTIONS_ICON_TERRAFORMED = "Terraformed system";
  public static String RATED_GAME = "Rated game";
  public static String TEXT_INSTRUCTIONS_ANIMATION_CAPTURED = "System captured<br><col=2F5FBF>(In colony colour)</col>";
  public static String MP_X_HAS_RESIGNED_AND_LEFT = "<%0> has resigned and left.";
  public static String CREATE_MORE_SUGGESTIONS = "More suggestions";
  public static String CREATE_AGE = "Age:";
  public static String RA_MUTE_THIS_PLAYER = "Mute this player for 48 hours";
  public static String WHO_CAN_JOIN = "Who can join";
  public static String TEXT_STAT_DESC_EFFICIENCY = "Resources used to construct vs total resources collected (average for game).";
  public static String FS_ACCEPT_COUNTDOWN_SING = "If you do nothing the game will revert to normal view in <%0> second.";
  public static String TEXT_STAT_DESC_MAX_PRODUCTION = "Most fleets constructed in one turn.";
  public static String MU_INVITE_WITHDRAWN = "The invitation has been withdrawn.";
  public static String TURN_ONE_POINT = "1 point per turn";
  public static String RATED_GAME_TIPS_SETUP_SINGULAR = "Here you can set up a rated game. If you win, your rating will go up. If<nbsp>you lose, it will go down!<br><br>Please specify your preferences and click '<%0>'. Our system will then attempt to find a suitable opponent in under a minute, depending on how busy the lobby<nbsp>is.<br><br>This is an excellent way to get to know new people!";
  public static String GAMEOPT_PLAYER_NEEDS_RATING = "<%0> would need a rating of <%1> to play with the current options.";
  public static String MP_REMATCH_NEW_GAME_UNRATED = "Set up new unrated game";
  public static String LOGIN_M3 = "Connection timed out. Please try using a different server.";
  public static String CONT = "Continue";
  public static String WAITING_FOR_X_TO_START_GAME = "Waiting for <%0> to start the game...";
  public static String TEXT_STAT_SHIPS_DESTROYED = "Fleets destroyed";
  public static String JOIN_REQUESTS_MANY = "(<%0> players want to join)";
  public static String TOOLTIP_OFFER_TREATY = "Click to offer a Non-Agression Pact to <%0>.";
  public static String MU_YOU_DECLINED_INVITE = "You have declined the invitation.";
  public static String RETURN_TO_MAIN_MENU = "Return to Main Menu";
  public static String FRIEND_NOT_FOUND = "<%0> is not on your friend list.";
  public static String PRIVATE_QUICK_CHAT_TO_X = "To <%0>: ";
  public static String TEXT_VICTORY = "VICTORY!";
  public static String MU_GAME_CHAT_FRIENDS = "Show game chat from my friends";
  public static String FS_BUTTON_MEMBERS = "Members";
  public static String TOOLTIP_VICTORY_PANE_MANY_MANY = "<%0> points, <%1> points per turn.";
  public static String YOU_CAN_SPECTATE = "You can spectate this game";
  public static String NO_OPTIONS_AVAILABLE = "No options available";
  public static String CONNECTION_LOST_RECONNECTING = "Connection lost - attempting to reconnect";
  public static String YOU_CAN_JOIN = "You can join this game";
  public static String PRESS_TAB_TO_CHAT = "Press TAB to chat or F10 to open Quick Chat.";
  public static String CREATE_AGREE_TERMS = "By clicking Create, you agree to the <%0><hotspot=0>Terms of Use</hotspot><%1> and <%0><hotspot=1>Privacy Policy</hotspot><%1>.";
  public static String TEXT_STAT_DEFENCES_SUCCESSFUL = "Successful defences";
  public static String RATED_GAME_TIPS = "Please wait while we search.<br>Games usually start within a minute, provided the server is busy enough.<br><br>The longer you are forced to wait, the earlier in the list of players you are likely to appear.<br><br>If the game doesn't start, click 'Cancel' and then try choosing 'Don't mind' for more options or switching to a busier lobby.";
  public static String MU_GAMELIST_OPTIONS = "Options";
  public static String MP_YOU_OFFER_REMATCH = "You are offering a rematch.";
  public static String LOGGING_IN = "Logging in...";
  public static String TEXT_STAT_SHIPS_CONSTRUCTED = "Fleets built";
  public static String MP_CANCEL_REMATCH_UNRATED = "Cancel unrated rematch";
  public static String CREATE_ALERT_PASS_CONTAINS_EMAIL = "This password contains your email address, and would be easy to guess";
  public static String GAMEOPT_PLEASE_SELECT_OPTION_1 = "Please select an option in the '<%0>' row.";
  public static String FS_TIMEOUT = "Fullscreen mode was cancelled after a delay of 10 seconds. If you were unable to accept fullscreen mode during this time, there may be a problem with your configuration. You could try restarting your browser and trying again.";
  public static String MU_OPTIONS_WHO_CAN_JOIN = "Who can join";
  public static String TEXT_STAT_EFFICIENCY = "Efficiency";
  public static String MP_X_WANTS_TO_DRAW = "<%0> wants to draw.";
  public static String ENTER_IGNORE_ADD = "Enter name of player to add to list";
  public static String GO_BACK = "Go Back";
  public static String QUICK_CHAT_HELP_TITLE = "Shortcut Reference";
  public static String CREATE_U13_TERMS = "As you are under 13, we won't save your email address on our systems. Your email address will still be used to log in, but you won't recieve any emails from Jagex. For more information, please check the relevant parts of our <%0><hotspot=0>Terms and Conditions</hotspot><%1> and <%0><hotspot=1>Privacy Policy</hotspot><%1>.";
  public static String SEND_PM_TO_X = "Send private message to <%0>";
  public static String OFFLINE = "Offline";
  public static String MP_ACCEPT_REMATCH = "Accept rematch";
  public static String TEXT_STAT_DESC_PROJECTS_USED = "Total number of projects deployed.";
  public static String MU_CHAT_LOBBY_HIDE = "Hide lobby chat";
  public static String TEXT_HUMAN_PLAYERS = "Human Players";
  public static String TEXT_TOGGLE_STATS_2 = "(hiding this text)";
  public static String YOUR_RATING_IS_X = "Your rating is <%0>";
  public static String ACHIEVEMENTS_RATED_ONLY = "All achievements are available only in rated games.";
  public static String MU_LOBBY_RATING = "Rating";
  public static String RA_INTRO_NO_NAME = "To report a player, right-click on their name and select the option to report abuse.";
  public static String GAMEOPT_YOU_NEED_RATING = "You need a rating of <%1> to play with the current options.";
  public static String YOU_ARE_ON_X_SERVER = "You are on <%0>";
  public static String MU_CHAT_INVISIBLE_AND_SILENT_MODE = "Hide private chat and appear offline to friends";
  public static String FIND_OPPONENT_SINGULAR = "Find opponent";
  public static String MU_CHAT_GAME_HIDE = "Hide game chat";
  public static String JOIN_REQUEST_XS_GAME = "Ask to join <%0>'s game";
  public static String JOIN_XS_GAME = "Join <%0>'s game";
  public static String MU_GAMEOPT_WITHDRAW_INVITE_TO_X = "Withdraw invitation to <%0> to join this game";
  public static String CREATE_ALERT_MISMATCH = "This entry doesn't match";
  public static String TEXT_INTRO_2_START = "Using a hastily converted fleet of experimental vessels, a small fraction of humanity managed to escape the scorched ruins of Earth.";
  public static String GAMEOPT_PLAYER_HASNT_UNLOCKED = "<%0> has not yet unlocked this option for use.";
  public static String MU_GAMELIST_ELAPSED_TIME = "Elapsed time";
  public static String CREATE_AGE_TOOLTIP = "Type your age in years";
  public static String TOOLTIP_PROJECTED_WINNER = "Projected winner.";
  public static String JOIN_REQUESTS_ONE = "(1 player wants to join)";
  public static String CREATE_ALERT_PASS_CONTAINS_NAME_PARTIAL = "This password is part of your Player Name, and would be easy to guess";
  public static String TEXT_STAT_RESEARCH_WASTED = "Total excess research";
  public static String TEXT_TOTAL_PLAYERS = "Total number of players in game will not exceed 6.";
  public static String GAMEOPT_UNSELECTED_OPTIONS = "The game options are not all set.";
  public static String INVALID_PASS = "Invalid password.";
  public static String CREATE_UNABLE = "Unfortunately we are unable to create an account for you at this time.";
  public static String LOADING_MUSIC = "Loading music";
  public static String RATING_LOST = "Lost";
  public static String GAMEOPT_MIGHT_CHANGE = "<%0> might change the options - wait and see.";
  public static String MU_CHAT_TIPS = "Tips";
  public static char KEYCHAR_THE_CHARACTER_UNDER_QUESTION_MARK = '/';
  public static String TUTORIAL_CAPTURE_ALL = "Capture all the systems on the map";
  public static String TEXT_STAT_ATTACKS_FAILED = "Failed attacks";
  public static String MU_CHAT_LOBBY_SHOW_ALL = "Show all lobby chat";
  public static String MU_CHAT_LOBBY_FRIENDS = "Show lobby chat from my friends";
  public static String MU_CHAT_GAME_SHOW_ALL = "Show all game chat";
  public static String RM_X_FROM_FRIENDS = "Remove <%0> from friend list";
  public static String ADD_X_TO_IGNORE = "Add <%0> to ignore list";
  public static String AUTO_RESPOND = "Auto-respond to <%0>";
  public static String QUICKCHAT_LOBBY = "Quick Chat lobby";
  public static String HIDE_PLAYERS_IN_XS_GAME = "Hide players in <%0>'s game";
  public static String IGNORE_NOT_FOUND = "<%0> is not on your ignore list.";
  public static String TEXT_INSTRUCTIONS_0 = "Welcome to Shattered Plans. <col=FF8080>Before playing the game, we recommend you first select 'Tutorial' from the main menu.</col><br><br><%highlight>BACKGROUND</col><br><br>You have been placed in command of the forces defending a colony of human survivors, following the disaster that rendered Earth uninhabitable.<br><br>It is your job to ensure your colony prospers and triumphs in the power struggle that has ensued after the colonies regained the power of spaceflight. To do so, you must <%highlight>capture resources</col> to <%highlight>build your ships</col>, maintain a flow of fleets to the front lines, and keep enough in reserve to <%highlight>maintain order</col> in your central systems. You also have access to powerful research <%highlight>projects</col> that may help you tip the balance.";
  public static String TEXT_INTRO_1_START = "In the first half of the 22nd Century (Old Earth Reckoning) scientists in the Escher Programme began research into faster-than-light travel.";
  public static String PRIVATE_QUICK_CHAT_FROM_X = "From <%0>: ";
  public static String MP_ACCEPT_REMATCH_UNRATED = "Accept unrated rematch";
  public static String CREATE_PASSWORD_CONFIRM = "Confirm Password: ";
  public static String REMOVE_FRIEND_FIRST = "Please remove <%0> from your friend list first.";
  public static String RULE_0_0 = "Buying or selling an account";
  public static String FS_BUTTON_TRY_AGAIN = "Try again";
  public static String STATUS_PLAYING = "Playing";
  public static String MU_PLAY_RATED = "Play rated game";
  public static String TICKETING_ONE_UNREAD = "You have 1 unread message!";
  public static String MULTICONST_SIMILAR_RATING = "Similar rating";
  public static String MULTICONST_CLAN = "Clan";
  public static String MU_OPTIONS_DONT_MIND = "Don't mind";
  public static String NO = "No";
  public static String TOOLTIP_INCOME_LIMITING = "This resource is limiting your fleet production.";
  public static String CREATE_INELIGIBLE = "Unfortunately you are not eligible to create an account.";
  public static String IGNORE_LIST_FULL = "Your ignore list is full. Max of 100 hit.";
  public static String GAMEOPT_INVITE_PLAYERS_OR_TRY_CHANGING_2 = "Invite more players, or alternatively try changing the following settings:  ";
  public static String TEXT_YOU_HAVE_BEEN_DEFEATED = "You have been defeated";
  public static String START_GAME = "Start Game";
  public static String FS_FOCUS = "Unfortunately there was a focus problem while setting fullscreen mode. You could try disabling any multiple monitor drivers or window enhancements, if you have any enabled.";
  public static String ORB_POINTS = "Orb points: <%0>";
  public static String TEXT_STAT_SOLIDITY = "Solidity";
  public static String TOOLTIP_PROJECTS_BUTTON_HIDE = "Click to hide the Projects window.";
  public static String MU_CHAT_OFF = "Off";
  public static String RATING_PLAYED = "Played";
  public static String PLAYERS_IN_GAME = "Players: ";
  public static String REJECT = "Reject";
  public static String FS_NONMEMBER = "Fullscreen play is an option available to subscribing members only. For more details see the website.";
  public static String RA_EXPLANATION = "A detailed explanation of each rule can be found through the link on our website.<br>(in the Help Section)";
  public static String CREATE_EMAIL_VALID = "Email is valid";
  public static String FS_ACCEPT_AFTER_ACCEPT = "to keep fullscreen or";
  public static String TAB_HIDE_CHAT_TEMPORARILY = "TAB - hide chat temporarily";
  public static String MU_LOBBY_FRIEND_ADD = "Add friend";
  public static String RATING_WON = "Won";
  public static String TEXT_ERROR = "ERROR!";
  public static String MP_YOU_OFFER_REMATCH_UNRATED = "You are offering an unrated rematch.";
  public static String TEXT_INSTRUCTIONS_SF_RESOURCES = "Resource output";
  public static String ORB_POINTS_COLON = "Orb points: ";
  public static String TEXT_INSTRUCTIONS_MV_TIME = "Time remaining";
  public static String CREATE_ALERT_NAME_LEADING_SPACE = "Names cannot start or end with space or underscore";
  public static String UNPACKING_MUSIC = "Unpacking music";
  public static String UNPACKING_GRAPHICS = "Unpacking graphics";
  public static String UNPACKING_SOUND_EFFECTS = "Unpacking sound effects";
  public static String WAITING_FOR_MUSIC = "Waiting for music";
  public static String WAITING_FOR_SOUND_EFFECTS = "Waiting for sound effects";
  public static String WAITING_FOR_FONTS = "Waiting for fonts";
  public static String MU_CHAT_IGNORE = "Ignore";
  public static String RULE_0_5 = "Exploiting a bug";
  public static String TEXT_MAP_SOL = "Game Type: Capture and Hold";
  public static String TEXT_MAP_POINTS = "Game Type: Points";
  public static String TEXT_MAP_DERELICTS = "Game Type: Derelicts";
  public static String TEXT_GARRISON_YES = "Rules: Classic";
  public static String END_TUTORIAL = "End Tutorial";
  public static String PAUSE_MENU = "Pause Menu";
  public static String FS_ACCEPT_AFTER_CANCEL = "to return to the normal view.";
  public static String ESC_CANCEL_THIS_LINE = "ESC - cancel this line";
  public static String GAMEOPT_NEED_CHANGING_1 = "The '<%0>' setting needs to be changed.";
  public static String TEXT_PEACE_SHORT = "PEACE!";
  public static String THIS_IS_RUNESCAPE_CLAN_NOT_OWNER = "This is <%0>'s RuneScape clan if they have one.";
  public static String GAMEOPT_PLEASE_TRY_CHANGING = "Please try changing the following settings:  ";
  public static String LOGIN_CREATE_TOOLTIP = "Create your own free Jagex account";
  public static String LOG_IN = "Log in";
  public static String MU_OPTIONS_PLAYERS = "Players";
  public static String TUTORIAL_RETREATING_MULTIPLE = "<%1> fleets have retreated to <%0>";
  public static String TOOLTIP_ANIM_AUTO_PLAY_IS_ON = "Animations play automatically at the start of the turn. Click to disable.";
  public static String CREATE_WELCOME = "Creating a Jagex account is simple and free. Your account will remember your progress, highscores and achievements in every game. You can also use it to play some of our multiplayer games - and Jagex's other games!<br><br><col=2164A2>Please note - if you have a RuneScape account, you can click 'Go Back' and use your existing account to log in!</col>";
  public static String TEXT_INSTRUCTIONS_MV_FRAME = "System HUD frame";
  public static String PRIVATE_CHAT_BLANK_AREA_EXPLANATION = "This private message is prefixed with \"<col=9090FF>To <%1>:</col>\" on your screen.<br>On <%1>'s screen, it will be prefixed with \"<col=FF6060>From <%0>:</col>\", which is<br>a different length and may leave less room for the message itself.<br><br>This shading covers the area which is not available on <%1>'s screen.<br>Provided your message fits to the left of the shaded area,<br><%1> should be able to see it in full.<br><br>(Note: this may be inaccurate if <%1> is playing in a different<br>language from you.)";
  public static String PLAY_FREE_VERSION = "Play free version";
  public static String CREATE_EMAIL = "Email (Login):";
  public static String ENTER_FRIEND_DEL = "Enter name of friend to delete from list";
  public static String LOADING_FONTS = "Loading fonts";
  public static String GAMEOPT_TRY_CHANGING_1 = "Try changing the '<%0>' setting.";
  public static String CREATE_PASSWORD_TOOLTIP = "Enter a password for this account. Try to pick a strong password that can't easily be guessed.";
  public static String YOU_HAVE_BEEN_REMOVED_FROM_XS_GAME = "You have been removed from <%0>'s game.";
  public static String PLEASE_LOG_IN = "Please log in to access this feature.";
  public static String SEND_QC_TO_X = "Send private Quick Chat to <%0>";
  public static String LOADING_SOUND_EFFECTS = "Loading sound effects";
  public static String CREATE_DIPLAY_NAME_HINT = "Player names can be up to 12 letters, numbers and underscores";
  public static String MP_CANCEL_REMATCH = "Cancel rematch";
  public static String TEXT_NOT_AVAILABLE = "N/A";
  public static String MU_LOBBY_FRIEND_RM = "Remove friend";
  public static String HINT_CANCEL_PROJECT = "Right click to cancel the <%0> at <%1>";
  public static String TEXT_STAT_DESC_DEFENCES_FAILED = "Battles lost in friendly space.";
  public static String RELOAD_GAME = "Reload game";
  public static String GAMEOPT_NO_VALID_COMBOS = "There are no valid types of game that match your preferences.";
  public static String RULE_0_2 = "Staff impersonation";
  public static String TEXT_INTRO_4_END = "The fates of the children of Earth rest in your hands.";
  public static String RULE_1_1 = "Solicitation";
  public static String SEARCHING_FOR_OPPONENT = "Searching for an opponent";
  public static String ADD_X_TO_FRIENDS = "Add <%0> to friend list";
  public static String RULE_1_0 = "Seriously offensive language";
  public static String TO_SERVER_LIST = "To server list";
  public static String MUSIC_COLON = "Music: ";
  public static String TRACK_NAME_OLD = "Warring Worlds";
  public static String CLOSE = "Close";
  public static String TAB_NAME_MESSAGES = "Status Report";
  public static String TRACK_NAME_NEW = "Perpetual Motion";
  public static String MU_CHAT_GAME = "Game";
  public static String INVALID_NAME = "Invalid name";
  public static String RETURN_TO_LOBBY = "Return to lobby";
  public static String QUICKCHAT_GAME = "Quick Chat game";
  public static String FULLSCREEN = "Fullscreen";
  public static String CREATE_USERNAME_UNAVAILABLE = "That name is not available";
  public static String TEXT_INSTRUCTIONS_MV_READY = "End turn";
  public static String RANKINGS = "Rankings";
  public static String TEXT_INSTRUCTIONS_PROJECT_EXOTICS = "<%PROJECT_EXOTICS> - (<%Resource3>) The <%Project_Exotics> creates a <%highlight>temporary wormhole between two systems</col>. This behaves as a normal <%glossary>wormhole</col> for a three-turn duration. One end must be anchored in a friendly <%glossary>system</col>, but the other end can be placed anywhere else on the map.";
  public static String ERROR_JS5CONNECT_FULL = "Data server full or too many connections from your address. Please try again in a few minutes.";
  public static String RESIGN = "Resign";
  public static String ENTER_MULTIPLAYER_LOBBY = "Enter multiplayer lobby";
  public static String ENTER_FRIEND_ADD = "Enter name of friend to add to list";
  public static String CONNECTING_TO_FRIEND_SERVER_TWO_LINE = "Connecting to<br>friend server...";
  public static String MU_CHAT_PM_FRIENDS = "Show private chat from my friends and opponents";
  public static String VICTORY_SOL_EMPTY = "Sol is unoccupied";
  public static String MENU = "Menu";
  public static String INSTRUCTIONS = "Instructions";
  public static String STATUS_SPECTATE = "Spectate";
  public static String MU_LOBBY_NAME_RM = "Remove name";
  public static String MU_GAMELIST_ALL_GAMES = "All games";
  public static String END_GAME = "End Game";
  public static String MU_CHAT_ON = "On";
  public static String TO_CUSTOMER_SUPPORT = "To Customer Support";
  public static String WATCH_INTRODUCTION = "Watch Introduction";
  public static String CREATE_OPT_IN_NEWS = "Please send me news and updates (I can unsubscribe at any time)";
  public static String SOUND_COLON = "Sound: ";
  public static String YOU_CAN_NOT_SPECTATE = "No spectators";
  public static String TUTORIAL_CONTINUE_KEY = "<col=2F5FBF>'ENTER'</col>";
  public static String MESSAGE_INCOMING_OFFERS = "You have incoming treaty offers.";
  public static String TEXT_MAP_HEX = "Game Type: Conquest";
  public static String TEXT_GARRISON_NO = "Rules: Streamlined";
  public static String UNABLE_TO_ADD_IGNORE = "Unable to add name - system busy";
  public static String LOGIN_CREATE_ACCOUNT = "Log in / Create account";
  public static String STATUS_FULL = "Full";
  public static String TOOLTIP_PARTIALLY_COMPLETE = "Project is <%0>/5 complete.";
  public static String ACHIEVEMENTS = "Achievements";
  public static String RATING_RATING = "Rating";
  public static String DAY = "Day";
  public static String MU_CHAT_PRIVATE = "Private";
  public static String TEXT_INSTRUCTIONS_GLOSSARY_2 = "<%glossary>PRODUCTION</col> - Each <%glossary>system</col> has a <%glossary>resource</col> output. Most systems produce low levels of one or two types of resources and only a very few systems are rich in all types. Construction of a fleet requires one unit of each resource.<br><br><%glossary>HOMEWORLD</col> - A <%glossary>resource</col>-rich system. A homeworld is either the starting system for one of the galaxy's colonies (indicated by <%highlight>three circles</col> orbiting the system's current <%glossary>garrison</col> figure) or a <%glossary>neutral</col> homeworld (<%highlight>two circles</col>).<br><br><%glossary>NON-AGGRESSION PACT (NAP)</col> - A temporary alliance between two colonies. After both parties agree to an alliance, they <%highlight>cannot attack</col> each other for <%highlight>three turns</col>. Once created, a <%glossary>NAP</col> can <%highlight>neither be broken or extended</col>.<br><br><%glossary>GARRISON</col> - Each <%glossary>system</col> requires one fleet stationed in it, to maintain order. If you leave a system empty at the end of the turn, you will lose control of it. Systems expected to fall in this way are overlaid with <%highlight>red crosshatching</col>. Systems that could fall due to attack have <%highlight>yellow crosshatching</col>.";
  public static String TOOLTIP_PROJECT_PENDING = "Project is complete and has been deployed. Click to cancel and deploy elsewhere.";
  public static String IGNORE_LIST_DUPE = "<%0> is already on your ignore list.";
  public static String X_WANTS_TO_JOIN = "<%0> wants to join";
  public static String YEAR = "Year";
  public static String UNABLE_TO_ADD_FRIEND = "Unable to add friend - system busy";
  public static String TEXT_INSTRUCTIONS_ANIMATION_COMBAT = "Combat in progress<br>(<col=FF0000>Red</col>, <col=2F5FBF>Blue</col> and <col=808080>Neutral</col> involved)";
  public static String PRIVATE_CHAT_FRIEND_NOT_LISTED = "You cannot chat to <%0> because <%0> is not in your friend list.";
  public static String TEXT_DEFEATED = "Defeated";
  public static String CREATE_ALERT_DOUBLE_SPACE = "Names cannot contain consecutive spaces";
  public static String TEXT_STAT_PROJECTS_USED = "Total projects used";
  public static String TOOLTIP_VICTORY_PANE_ONE_MANY = "1 point, <%0> points per turn.";
  public static String VICTORY_SOL_OWNED = "Sol is owned by";
  public static String CREATE = "Create";
  public static String STATUS_JOIN = "Join";
  public static String TEXT_PEACE = "PEACE DECLARED!";
  public static String DEFAULT_PLAYER_NAME = "Player";
  public static String RULE_2_0 = "Asking for or providing contact information";
  public static String STATUS_PRIVATE = "Private";
  public static String PACT_AWAITING = "Awaiting response";
  public static String CANCEL = "Cancel";
  public static String WAITING_FOR_EXTRA_DATA = "Waiting for extra data";
  public static String WARNING_IF_YOU_QUIT = "Warning: if you quit, you will lose any game you are in the middle of!";
  public static String MU_GAMELIST_OWNER = "Owner";
  public static String PUBLIC_CHAT_UNAVAILABLE_RATED_GAME = "Public chat is unavailable while setting up a rated game.";
  public static String TEXT_HIDE_CHAT = "C: Hide Chat";
  public static String CANNOT_ADD_YOURSELF = "You cannot add yourself!";
  public static String LOGIN_M2 = "Error connecting to server. Please try using a different server.";
  public static String TEXT_PLAYER_HAS_WON = "<%0> HAS WON!";
  public static String MU_LOBBY_NAME_ADD = "Add name";
  public static String FS_ACCEPT_COUNTDOWN_PL = "If you do nothing the game will revert to normal view in <%0> seconds.";
  public static String TEXT_STAT_DESC_ATTACKS_FAILED = "Battles lost in hostile space.";
  public static String TEXT_INSTRUCTIONS_SF_INCOMING = "Incoming fleet";
  public static String ENTER_IGNORE_DEL = "Enter name of player to delete from list";
  public static String TUTORIAL_CONTINUE_3 = "Try this now, or press <col=2F5FBF>'ENTER'</col> to continue.";
  public static String TOOLTIP_ACCEPT_TREATY = "Click to accept the Non-Agression Pact <%0> is offering.";
  public static String TEXT_STAT_MAX_PRODUCTION = "Maximum total production";
  public static String TEXT_INSTRUCTIONS_PROJECT_BIOMASS = "<%PROJECT_BIOMASS> - (<%Resource1>) A <col=<%colbiomass>>terraformed</col> <%glossary>system</col> always produces <%highlight>six resource units</col>, which are not related to the production level of the system prior to <%project_biomass>. This project may be used on any system you control.";
  public static String INVALID_USER_OR_PASS = "Invalid Login or Password<br><br>For accounts created after the 24th of November 2010, please use your email address to log in.<br><br>Otherwise please log in with your username.";
  public static String TEXT_INTRO_4_START = "These are momentous times. Your colony is preparing to return to space once more. The now-perfected wormhole technology has revealed an array of possibilities and mighty starships shall once again seek destiny in the heavens.";
  public static String REPORT_ABUSE = "Report abuse";
  public static String GAMEOPT_YOU_NEED_RATED_GAMES = "You must play <%1> more rated games before playing with the current options.";
  public static String CREATE_ALERT_INVALID_EMAIL = "Please check if address is correct";
  public static String CREATE_ALERT_EMAIL_UNAVAILABLE = "Email address is unavailable";
  public static String CREATE_ALERT_INVALID_DATE = "Invalid date";
  public static String MONTH = "Month";
  public static String TEXT_INSTRUCTIONS_MOVEMENT = "<%highlight>FLEET MOVEMENT</col> - To issue a fleet order, <%key>click</col> on a <%glossary>system</col> you control that has available fleets, then <%key>click</col> on a destination system. Fleets can make <%highlight>one</col> <%glossary>wormhole</col> jump per turn through hostile territory, but can move an unlimited distance through your own systems. Fleets that are about to move are displayed as a <%highlight>curved arrow</col> between the source and destination system.";
  public static String PRESS_F10_TO_QUICK_CHAT = "Press F10 to open Quick Chat.";
  public static String TEXT_INSTRUCTIONS_ICON_NEUTRAL = "Neutral homeworld";
  public static String TEXT_STAT_AVG_MOVE_SIZE = "Average fleet move size";
  public static String RULE_0_3 = "Macroing or use of bots";
  public static String YOU_CANNOT_JOIN_IN_PROGRESS = "You cannot join this game - it is in progress";
  public static String MP_X_OFFERS_REMATCH_UNRATED = "<%0> is offering an unrated rematch.";
  public static String MU_GAMELIST_PLAYERS = "Players";
  public static String RUNESCAPE_CLAN = "RuneScape clan";
  public static String MP_YOU_RESIGNED = "You have resigned.";
  public static String MP_YOU_OFFER_DRAW = "You are offering to draw.";
  public static String MP_OFFER_REMATCH = "Offer rematch";
  public static String MP_OFFER_REMATCH_UNRATED = "Offer unrated rematch";
  public static String STATUS_CONCLUDED = "Concluded";
  public static String TEXT_INSTRUCTIONS_CLASSIC_STELLAR_BOMB = "<br><br><%PROJECT_ENERGY> - In the Classic rules, a <%project_energy> does not destroy a <%project_metal> in the target system. Instead, the bomb will destroy half the fleets in the system but leave the net in place. It will also prevent fleets leaving the system as normal.";
  public static String MU_ENTERED_OTHER_GAME = "You have entered another game.";
  public static String DOB_CHAT_DISABLED = "Chat is currently disabled.";
  public static String RULE_1_3 = "Offensive account name";
  public static String RULE_1_2 = "Disruptive behaviour";
  public static String GAMEOPT_INVITE_PLAYERS_OR_TRY_CHANGING_1 = "Invite more players, or alternatively try changing the '<%0>' setting.";
  public static String GAMEOPT_PLEASE_SELECT_OPTION_2 = "Please select options in the following rows:  ";
  public static String TEXT_INSTRUCTIONS_PLACEMENT = "<%highlight>FLEET PLACEMENT</col> - To place fleets, <%key>click</col> on your Production panel (at the top of the <%highlight>Production window</col>), then <%key>click<col> on a <%glossary>system</col> you control.";
  public static String TEXT_TOGGLE_STATS = "Press 'SPACE' to toggle game statistics";
  public static String TEXT_INSTRUCTIONS_END_TURN = "<%highlight>ENDING TURNS</col> - <%key>Clicking</col> on the Ready button (a <%highlight>tick within a circle</col>) at the top-right of the screen marks your move as complete. Once all players have completed their moves, <%highlight>all orders will be executed</col> and a new turn will begin. Making any adjustments to your orders will clear your ready status, and you will need to press the button again when you are finished.";
  public static String TEXT_STAT_DEFENCES_FAILED = "Failed defences";
  public static String TEXT_STAT_FLUIDITY = "Fluidity";
  public static String TEXT_STAT_AGGRESSIVENESS = "Aggressiveness";
  public static String TEXT_STAT_DESC_SHIPS_DESTROYED = "Opposing fleets destroyed.";
  public static String TEXT_STAT_DESC_SHIPS_LOST = "Total fleets lost.";
  public static String TEXT_STAT_DESC_AVG_MOVE_SIZE = "Average number of fleets committed to each operation.";
  public static String TEXT_STAT_DESC_SOLIDITY = "Percentage of battles won in friendly space.";
  public static String FS_BUTTON_CANCEL = "Cancel";
  public static String FS_BUTTON_ACCEPT = "Accept";
  public static String CREATE_TO_USE = "Create a free account to start using this feature";
  public static String TEXT_INSTRUCTIONS_HOTKEYS = "<%highlight>HOT KEYS</col> - For placement, fleet moves and fleet strength adjustment, <%key>'SHIFT'</col> will make changes in units of <%highlight>one fleet</col>, <%key>'ALT'</col> will use units of <%highlight>5 fleets</col>, and <%key>'CTRL'</col> will use <%highlight>all available fleets</col>.";
  public static String TEXT_INSTRUCTIONS_SF_NAME = "System name";
  public static String TEXT_ENEMY_PRODUCTION = "Enemy Production";
  public static String TEXT_SKIP_INTRO = "Skip Intro";
  public static String TEXT_ESC_TO_EXIT = "Press 'ESC' to exit the game";
  public static String FS_BUTTON_CLOSE = "Close";
  public static String RA_TITLE = "Report abuse";

  public static void loadCommon(final ResourceLoader loader) {
    loadString(loader, "loginm3", str -> LOGIN_M3 = str);
    loadString(loader, "loginm2", str -> LOGIN_M2 = str);
    loadString(loader, "idlemessage20min", str -> IDLE_MESSAGE_20_MIN = str);
    loadString(loader, "error_js5crc", str -> ERROR_JS5CRC = str);
    loadString(loader, "error_js5io", str -> COMM_IO_ERROR = str);
    loadString(loader, "error_js5connect_full", str -> ERROR_JS5CONNECT_FULL = str);
    loadString(loader, "error_js5connect", str -> ERROR_JS5_CONNECT = str);
    loadString(loader, "login_gameupdated", str -> LOGIN_GAME_UPDATED = str);
    loadString(loader, "create_unable", str -> CREATE_UNABLE = str);
    loadString(loader, "create_ineligible", str -> CREATE_INELIGIBLE = str);
    loadString(loader, "ticketing_oneunread", str -> TICKETING_ONE_UNREAD = str);
    loadString(loader, "ticketing_xunread", str -> TICKETING_X_UNREAD = str);
    loadString(loader, "ticketing_gotowebsite", str -> VISIT_ACCOUNT_MANAGEMENT = str);
    loadString(loader, "mu_chat_on", str -> MU_CHAT_ON = str);
    loadString(loader, "mu_chat_friends", str -> MU_CHAT_FRIENDS = str);
    loadString(loader, "mu_chat_off", str -> MU_CHAT_OFF = str);
    loadString(loader, "mu_chat_lobby", str -> MU_CHAT_LOBBY = str);
    loadString(loader, "mu_chat_ignore", str -> MU_CHAT_IGNORE = str);
    loadString(loader, "mu_chat_tips", str -> MU_CHAT_TIPS = str);
    loadString(loader, "mu_chat_game", str -> MU_CHAT_GAME = str);
    loadString(loader, "mu_chat_private", str -> MU_CHAT_PRIVATE = str);
    loadString(loader, "mu_x_entered_game", str -> MU_X_ENTERED_GAME = str);
    loadString(loader, "mu_x_joined_your_game", str -> MU_X_JOINED_YOUR_GAME = str);
    loadString(loader, "mu_x_entered_other_game", str -> MU_X_ENTERED_OTHER_GAME = str);
    loadString(loader, "mu_x_left_lobby", str -> MU_X_LEFT_LOBBY = str);
    loadString(loader, "mu_x_lost_con", str -> MU_X_LOST_CON = str);
    loadString(loader, "mu_x_cannot_join_full", str -> MU_X_CANNOT_JOIN_FULL = str);
    loadString(loader, "mu_x_cannot_join_inprogress", str -> MU_X_CANNOT_JOIN_IN_PROGRESS = str);
    loadString(loader, "mu_x_declined_invite", str -> MU_X_DECLINED_INVITE = str);
    loadString(loader, "mu_x_withdrew_request", str -> MU_X_WITHDREW_REQUEST = str);
    loadString(loader, "mu_x_removed", str -> MU_X_REMOVED = str);
    loadString(loader, "mu_x_dropped_out", str -> MU_X_DROPPED_OUT = str);
    loadString(loader, "mu_entered_other_game", str -> MU_ENTERED_OTHER_GAME = str);
    loadString(loader, "mu_game_is_full", str -> MU_GAME_IS_FULL = str);
    loadString(loader, "mu_game_has_started", str -> MU_GAME_HAS_STARTED = str);
    loadString(loader, "mu_you_declined_invite", str -> MU_YOU_DECLINED_INVITE = str);
    loadString(loader, "mu_invite_withdrawn", str -> MU_INVITE_WITHDRAWN = str);
    loadString(loader, "mu_request_declined", str -> MU_REQUEST_DECLINED = str);
    loadString(loader, "mu_request_withdrawn", str -> MU_REQUEST_WITHDRAWN = str);
    loadString(loader, "mu_all_players_have_left", str -> MU_ALL_PLAYERS_HAVE_LEFT = str);
    loadString(loader, "mu_lobby_name", str -> MU_LOBBY_NAME = str);
    loadString(loader, "mu_lobby_rating", str -> MU_LOBBY_RATING = str);
    loadString(loader, "mu_lobby_friend_add", str -> MU_LOBBY_FRIEND_ADD = str);
    loadString(loader, "mu_lobby_friend_rm", str -> MU_LOBBY_FRIEND_RM = str);
    loadString(loader, "mu_lobby_name_add", str -> MU_LOBBY_NAME_ADD = str);
    loadString(loader, "mu_lobby_name_rm", str -> MU_LOBBY_NAME_RM = str);
    loadString(loader, "mu_lobby_location", str -> MU_LOBBY_LOCATION = str);
    loadString(loader, "mu_gamelist_all_games", str -> MU_GAMELIST_ALL_GAMES = str);
    loadString(loader, "mu_gamelist_status", str -> STATUS = str);
    loadString(loader, "mu_gamelist_owner", str -> MU_GAMELIST_OWNER = str);
    loadString(loader, "mu_gamelist_players", str -> MU_GAMELIST_PLAYERS = str);
    loadString(loader, "mu_gamelist_avg_rating", str -> MU_GAMELIST_AVG_RATING = str);
    loadString(loader, "mu_gamelist_options", str -> MU_GAMELIST_OPTIONS = str);
    loadString(loader, "mu_gamelist_elapsed_time", str -> MU_GAMELIST_ELAPSED_TIME = str);
    loadString(loader, "mu_play_rated", str -> MU_PLAY_RATED = str);
    loadString(loader, "mu_create_unrated", str -> MU_CREATE_UNRATED = str);
    loadString(loader, "mu_options", str -> MU_OPTIONS = str);
    loadString(loader, "mu_options_whocanjoin", str -> MU_OPTIONS_WHO_CAN_JOIN = str);
    loadString(loader, "mu_options_players", str -> MU_OPTIONS_PLAYERS = str);
    loadString(loader, "mu_options_dontmind", str -> MU_OPTIONS_DONT_MIND = str);
    loadString(loader, "mu_options_allow_spectate", str -> MU_OPTIONS_ALLOW_SPECTATE = str);
    loadString(loader, "yes", str -> YES = str);
    loadString(loader, "no", str -> NO = str);
    loadString(loader, "mu_invite_players", str -> MU_INVITE_PLAYERS = str);
    loadString(loader, "close", str -> CLOSE = str);
    loadString(loader, "add_x_to_friends", str -> ADD_X_TO_FRIENDS = str);
    loadString(loader, "add_x_to_ignore", str -> ADD_X_TO_IGNORE = str);
    loadString(loader, "rm_x_from_friends", str -> RM_X_FROM_FRIENDS = str);
    loadString(loader, "rm_x_from_ignore", str -> RM_X_FROM_IGNORE = str);
    loadString(loader, "send_pm_to_x", str -> SEND_PM_TO_X = str);
    loadString(loader, "send_qc_to_x", str -> SEND_QC_TO_X = str);
    loadString(loader, "send_pm", str -> SEND_PM = str);
    loadString(loader, "invite_accept_xs_game", str -> ACCEPT_PLAYER_INVITATION = str);
    loadString(loader, "invite_decline_xs_game", str -> INVITE_DECLINE_XS_GAME = str);
    loadString(loader, "join_xs_game", str -> JOIN_XS_GAME = str);
    loadString(loader, "join_request_xs_game", str -> JOIN_REQUEST_XS_GAME = str);
    loadString(loader, "join_withdraw_request_xs_game", str -> JOIN_WITHDRAW_REQUEST_XS_GAME = str);
    loadString(loader, "mu_gameopt_kick_x_from_this_game", str -> MU_GAMEOPT_KICK_X_FROM_THIS_GAME = str);
    loadString(loader, "mu_gameopt_withdraw_invite_to_x", str -> MU_GAMEOPT_WITHDRAW_INVITE_TO_X = str);
    loadString(loader, "mu_gameopt_accept_x_into_game", str -> MU_GAMEOPT_ACCEPT_X_INTO_GAME = str);
    loadString(loader, "mu_gameopt_reject_x_from_game", str -> MU_GAMEOPT_REJECT_X_FROM_GAME = str);
    loadString(loader, "mu_gameopt_invite_x_to_game", str -> MU_GAMEOPT_INVITE_X_TO_GAME = str);
    loadString(loader, "report_x_for_abuse", str -> REPORT_X_FOR_ABUSE = str);
    loadString(loader, "unable_to_send_message_password_a", str -> DONT_TELL_PASSWORD = str);
    loadString(loader, "unable_to_send_message_password_b", str -> PLEASE_CHANGE_PASSWORD = str);
    loadString(loader, "mu_chat_lobby_show_all", str -> MU_CHAT_LOBBY_SHOW_ALL = str);
    loadString(loader, "mu_chat_lobby_friends_only", str -> MU_CHAT_LOBBY_FRIENDS_ONLY = str);
    loadString(loader, "mu_chat_lobby_friends", str -> MU_CHAT_LOBBY_FRIENDS = str);
    loadString(loader, "mu_chat_lobby_hide", str -> MU_CHAT_LOBBY_HIDE = str);
    loadString(loader, "mu_chat_game_show_all", str -> MU_CHAT_GAME_SHOW_ALL = str);
    loadString(loader, "mu_chat_game_friends_only", str -> MU_CHAT_GAME_FRIENDS_ONLY = str);
    loadString(loader, "mu_chat_game_friends", str -> MU_GAME_CHAT_FRIENDS = str);
    loadString(loader, "mu_chat_game_hide", str -> MU_CHAT_GAME_HIDE = str);
    loadString(loader, "mu_chat_pm_show_all", str -> MU_CHAT_PM_SHOW_ALL = str);
    loadString(loader, "mu_chat_pm_friends_only", str -> MU_CHAT_PM_FRIENDS_ONLY = str);
    loadString(loader, "mu_chat_pm_friends", str -> MU_CHAT_PM_FRIENDS = str);
    loadString(loader, "mu_chat_invisible_and_silent_mode", str -> MU_CHAT_INVISIBLE_AND_SILENT_MODE = str);
    loadString(loader, "you_have_been_removed_from_xs_game", str -> YOU_HAVE_BEEN_REMOVED_FROM_XS_GAME = str);
    loadString(loader, "your_rating_is_x", str -> YOUR_RATING_IS_X = str);
    loadString(loader, "you_are_on_x_server", str -> YOU_ARE_ON_X_SERVER = str);
    loadString(loader, "rated_game", str -> RATED_GAME = str);
    loadString(loader, "unrated_game", str -> UNRATED_GAME = str);
    loadString(loader, "rated_game_tips", str -> RATED_GAME_TIPS = str);
    loadString(loader, "searching_for_opponent_singular", str -> SEARCHING_FOR_OPPONENT = str);
    loadString(loader, "searching_for_opponents_plural", str -> SEARCHING_FOR_OPPONENTS = str);
    loadString(loader, "find_opponent_singular", str -> FIND_OPPONENT_SINGULAR = str);
    loadString(loader, "find_opponents_plural", str -> FIND_OPPONENTS = str);
    loadString(loader, "rated_game_tips_setup_singular", str -> RATED_GAME_TIPS_SETUP_SINGULAR = str);
    loadString(loader, "rated_game_tips_setup_plural", str -> INFO_RATED_GAME = str);
    loadString(loader, "waiting_to_start_hint", str -> WAITING_TO_START_HINT = str);
    loadString(loader, "your_game", str -> YOUR_GAME = str);
    loadString(loader, "game_full", str -> GAME_FULL = str);
    loadString(loader, "join_requests_one", str -> JOIN_REQUESTS_ONE = str);
    loadString(loader, "join_requests_many", str -> JOIN_REQUESTS_MANY = str);
    loadString(loader, "xs_game", str -> XS_GAME = str);
    loadString(loader, "waiting_for_x_to_start_game", str -> WAITING_FOR_X_TO_START_GAME = str);
    loadString(loader, "game_options_changed", str -> GAME_OPTS_CHANGED = str);
    loadString(loader, "players_x_of_y", str -> PLAYERS_X_OF_Y = str);
    loadString(loader, "message_lobby", str -> MESSAGE_LOBBY = str);
    loadString(loader, "quickchat_lobby", str -> QUICKCHAT_LOBBY = str);
    loadString(loader, "message_game", str -> MESSAGE_GAME = str);
    loadString(loader, "quickchat_game", str -> QUICKCHAT_GAME = str);
    loadString(loader, "kick", str -> KICK = str);
    loadString(loader, "inviting_x", str -> INVITING_X = str);
    loadString(loader, "x_wants_to_join", str -> X_WANTS_TO_JOIN = str);
    loadString(loader, "accept", str -> ACCEPT = str);
    loadString(loader, "reject", str -> REJECT = str);
    loadString(loader, "invite", str -> INVITE = str);
    loadString(loader, "status_concluded", str -> STATUS_CONCLUDED = str);
    loadString(loader, "status_spectate", str -> STATUS_SPECTATE = str);
    loadString(loader, "status_playing", str -> STATUS_PLAYING = str);
    loadString(loader, "status_join", str -> STATUS_JOIN = str);
    loadString(loader, "status_private", str -> STATUS_PRIVATE = str);
    loadString(loader, "status_full", str -> STATUS_FULL = str);
    loadString(loader, "players_in_game", str -> PLAYERS_IN_GAME = str);
    loadString(loader, "you_are_invited_to_xs_game", str -> YOU_ARE_INVITED_TO_XS_GAME = str);
    loadString(loader, "asking_to_join_xs_game", str -> ASKING_TO_JOIN_XS_GAME = str);
    loadString(loader, "who_can_join", str -> WHO_CAN_JOIN = str);
    loadString(loader, "you_can_join", str -> YOU_CAN_JOIN = str);
    loadString(loader, "you_can_ask_to_join", str -> YOU_CAN_ASK_TO_JOIN = str);
    loadString(loader, "you_cannot_join_in_progress", str -> YOU_CANNOT_JOIN_IN_PROGRESS = str);
    loadString(loader, "you_can_spectate", str -> YOU_CAN_SPECTATE = str);
    loadString(loader, "you_can_not_spectate", str -> YOU_CAN_NOT_SPECTATE = str);
    loadString(loader, "spectate_xs_game", str -> SPECTATE_XS_GAME = str);
    loadString(loader, "hide_players_in_xs_game", str -> HIDE_PLAYERS_IN_XS_GAME = str);
    loadString(loader, "show_players_in_xs_game", str -> SHOW_PLAYERS_IN_XS_GAME = str);
    loadString(loader, "connecting_to_friend_server_twoline", str -> CONNECTING_TO_FRIEND_SERVER_TWO_LINE = str);
    loadString(loader, "loading", str -> LOADING = str);
    loadString(loader, "offline", str -> OFFLINE = str);
    loadString(loader, "multiconst_invite_only", str -> MULTICONST_INVITE_ONLY = str);
    loadString(loader, "multiconst_clan", str -> MULTICONST_CLAN = str);
    loadString(loader, "multiconst_friends", str -> MULTICONST_FRIENDS = str);
    loadString(loader, "multiconst_similar_rating", str -> MULTICONST_SIMILAR_RATING = str);
    loadString(loader, "multiconst_open", str -> MULTICONST_OPEN = str);
    loadString(loader, "no_options_available", str -> NO_OPTIONS_AVAILABLE = str);
    loadString(loader, "reportabuse", str -> REPORT_ABUSE = str);
    loadString(loader, "presstabtochat", str -> PRESS_TAB_TO_CHAT = str);
    loadString(loader, "pressf10toquickchat", str -> PRESS_F10_TO_QUICK_CHAT = str);
    loadString(loader, "dob_chatdisabled", str -> DOB_CHAT_DISABLED = str);
    loadString(loader, "dob_enterforchat", str -> DOB_ENTER_FOR_CHAT = str);
    loadString(loader, "tab_hidechattemporarily", str -> TAB_HIDE_CHAT_TEMPORARILY = str);
    loadString(loader, "esc_cancelprivatemessage", str -> ReportAbuseDialog._Kb = str);
    loadString(loader, "esc_cancelthisline", str -> ESC_CANCEL_THIS_LINE = str);
    loadString(loader, "privatequickchat_from_x", str -> PRIVATE_QUICK_CHAT_FROM_X = str);
    loadString(loader, "privatequickchat_to_x", str -> PRIVATE_QUICK_CHAT_TO_X = str);
    loadString(loader, "privatechat_blankarea_explanation", str -> PRIVATE_CHAT_BLANK_AREA_EXPLANATION = str);
    loadString(loader, "publicchat_unavailable_ratedgame", str -> PUBLIC_CHAT_UNAVAILABLE_RATED_GAME = str);
    loadString(loader, "privatechat_friend_offline", str -> PRIVATE_CHAT_FRIEND_OFFLINE = str);
    loadString(loader, "privatechat_friend_notlisted", str -> PRIVATE_CHAT_FRIEND_NOT_LISTED = str);
    loadString(loader, "chatviewscrolledup", str -> CHAT_VIEW_SCROLLED_UP = str);
    loadString(loader, "thisisrunescapeclan", str -> THIS_IS_RUNESCAPE_CLAN = str);
    loadString(loader, "thisisrunescapeclan_notowner", str -> THIS_IS_RUNESCAPE_CLAN_NOT_OWNER = str);
    loadString(loader, "runescapeclan", str -> RUNESCAPE_CLAN = str);
    loadString(loader, "gameopt_cannotbecombined1", str -> GAMEOPT_CANNOT_BE_COMBINED_1 = str);
    loadString(loader, "gameopt_cannotbecombined2", str -> GAMEOPT_CANNOT_BE_COMBINED_2 = str);
    loadString(loader, "gameopt_playerneedsrating", str -> GAMEOPT_PLAYER_NEEDS_RATING = str);
    loadString(loader, "gameopt_youneedrating", str -> GAMEOPT_YOU_NEED_RATING = str);
    loadString(loader, "gameopt_playerneedsratedgames", str -> GAMEOPT_PLAYER_NEEDS_RATED_GAMES = str);
    loadString(loader, "gameopt_youneedratedgames", str -> GAMEOPT_YOU_NEED_RATED_GAMES = str);
    loadString(loader, "gameopt_playerneeds1ratedgame", str -> GAMEOPT_PLAYER_NEEDS_1_RATED_GAME = str);
    loadString(loader, "gameopt_playerhasntunlocked", str -> GAMEOPT_PLAYER_HASNT_UNLOCKED = str);
    loadString(loader, "gameopt_youhaventunlocked", str -> GAMEOPT_YOU_HAVENT_UNLOCKED = str);
    loadString(loader, "gameopt_trychanging1", str -> GAMEOPT_TRY_CHANGING_1 = str);
    loadString(loader, "gameopt_needchanging1", str -> GAMEOPT_NEED_CHANGING_1 = str);
    loadString(loader, "gameopt_mightchange", str -> GAMEOPT_MIGHT_CHANGE = str);
    loadString(loader, "gameopt_unselectedoptions", str -> GAMEOPT_UNSELECTED_OPTIONS = str);
    loadString(loader, "gameopt_pleaseselectoption1", str -> GAMEOPT_PLEASE_SELECT_OPTION_1 = str);
    loadString(loader, "gameopt_pleaseselectoption2", str -> GAMEOPT_PLEASE_SELECT_OPTION_2 = str);
    loadString(loader, "gameopt_badnumplayers", str -> GAMEOPT_BADNUMPLAYERS = str);
    loadString(loader, "gameopt_inviteplayers_or_trychanging1", str -> GAMEOPT_INVITE_PLAYERS_OR_TRY_CHANGING_1 = str);
    loadString(loader, "gameopt_inviteplayers_or_trychanging2", str -> GAMEOPT_INVITE_PLAYERS_OR_TRY_CHANGING_2 = str);
    loadString(loader, "gameopt_novalidcombos", str -> GAMEOPT_NO_VALID_COMBOS = str);
    loadString(loader, "gameopt_pleasetrychanging", str -> GAMEOPT_PLEASE_TRY_CHANGING = str);
    loadString(loader, "ra_title", str -> RA_TITLE = str);
    loadString(loader, "ra_mutethisplayer", str -> RA_MUTE_THIS_PLAYER = str);
    loadString(loader, "ra_suggestmute", str -> RA_SUGGEST_MUTE = str);
    loadString(loader, "ra_intro", str -> RA_INTRO = str);
    loadString(loader, "ra_intro_no_name", str -> RA_INTRO_NO_NAME = str);
    loadString(loader, "ra_explanation", str -> RA_EXPLANATION = str);
    loadString(loader, "rule_pillar_0", str -> RULE_PILLAR_0 = str);
    loadString(loader, "rule_0_0", str -> RULE_0_0 = str);
    loadString(loader, "rule_0_1", str -> RULE_0_1 = str);
    loadString(loader, "rule_0_2", str -> RULE_0_2 = str);
    loadString(loader, "rule_0_3", str -> RULE_0_3 = str);
    loadString(loader, "rule_0_4", str -> RULE_0_4 = str);
    loadString(loader, "rule_0_5", str -> RULE_0_5 = str);
    loadString(loader, "rule_pillar_1", str -> RULE_PILLAR_1 = str);
    loadString(loader, "rule_1_0", str -> RULE_1_0 = str);
    loadString(loader, "rule_1_1", str -> RULE_1_1 = str);
    loadString(loader, "rule_1_2", str -> RULE_1_2 = str);
    loadString(loader, "rule_1_3", str -> RULE_1_3 = str);
    loadString(loader, "rule_1_4", str -> RULE_1_4 = str);
    loadString(loader, "rule_pillar_2", str -> RULE_PILLAR_2 = str);
    loadString(loader, "rule_2_0", str -> RULE_2_0 = str);
    loadString(loader, "rule_2_1", str -> RULE_2_1 = str);
    loadString(loader, "rule_2_2", str -> RULE_2_2 = str);
    loadString(loader, "cancel", str -> CANCEL = str);
    loadString(loader, "pleaselogin", str -> PLEASE_LOG_IN = str);
    loadString(loader, "invaliduserorpass", str -> INVALID_USER_OR_PASS = str);
    loadString(loader, "pleasetryagain", str -> PLEASE_TRY_AGAIN = str);
    loadString(loader, "playfreeversion", str -> PLAY_FREE_VERSION = str);
    loadString(loader, "reloadgame", str -> RELOAD_GAME = str);
    loadString(loader, "toserverlist", str -> TO_SERVER_LIST = str);
    loadString(loader, "tocustomersupport", str -> TO_CUSTOMER_SUPPORT = str);
    loadString(loader, "changedisplayname", str -> CHANGE_DISPLAY_NAME = str);
    loadString(loader, "justplay", str -> JUST_PLAY = str);
    loadString(loader, "login", str -> LOG_IN = str);
    loadString(loader, "goback", str -> GO_BACK = str);
    loadString(loader, "logging_in", str -> LOGGING_IN = str);
    loadString(loader, "connectionlost_reconnecting", str -> CONNECTION_LOST_RECONNECTING = str);
    loadString(loader, "invalidpass", str -> INVALID_PASS = str);
    loadString(loader, "retry", str -> RETRY = str);
    loadString(loader, "back", str -> BACK = str);
    loadString(loader, "quittowebsite", str -> QUIT_TO_WEBSITE = str);
    loadString(loader, "connectionrestored", str -> CONNECTION_RESTORED = str);
    loadString(loader, "warning_ifyouquit", str -> WARNING_IF_YOU_QUIT = str);
    loadString(loader, "checking", str -> CHECKING = str);
    loadString(loader, "openinpopupwindow", str -> OPEN_IN_POPUP_WINDOW = str);
    loadString(loader, "create", str -> CREATE = str);
    loadString(loader, "creatingyouraccount", str -> CREATING_YOUR_ACCOUNT = str);
    loadString(loader, "day", str -> DAY = str);
    loadString(loader, "month", str -> MONTH = str);
    loadString(loader, "year", str -> YEAR = str);
    loadString(loader, "create_welcome", str -> CREATE_WELCOME = str);
    loadString(loader, "create_createanaccount", str -> CREATE_CREATE_AN_ACCOUNT = str);
    loadString(loader, "create_displayname", str -> CREATE_DISPLAY_NAME = str);
    loadString(loader, "create_password", str -> CREATE_PASSWORD = str);
    loadString(loader, "create_password_confirm", str -> CREATE_PASSWORD_CONFIRM = str);
    loadString(loader, "create_email", str -> CREATE_EMAIL = str);
    loadString(loader, "create_email_confirm", str -> CREATE_EMAIL_CONFIRM = str);
    loadString(loader, "create_age", str -> CREATE_AGE = str);
    loadString(loader, "create_suggestions", str -> CREATE_SUGGESTIONS = str);
    loadString(loader, "create_more_suggestions", str -> CREATE_MORE_SUGGESTIONS = str);
    loadString(loader, "create_select_alternative", str -> CREATE_SELECT_ALTERNATIVE = str);
    loadString(loader, "create_optin_news", str -> CREATE_OPT_IN_NEWS = str);
    loadString(loader, "create_agreeterms", str -> CREATE_AGREE_TERMS = str);
    loadString(loader, "create_u13terms", str -> CREATE_U13_TERMS = str);
    loadString(loader, "login_username_email", str -> LOGIN_USERNAME_EMAIL = str);
    loadString(loader, "login_username_tooltip", str -> LOGIN_USERNAME_TOOLTIP = str);
    loadString(loader, "login_create_tooltip", str -> LOGIN_CREATE_TOOLTIP = str);
    loadString(loader, "login_justplay_tooltip", str -> LOGIN_JUST_PLAY_TOOLTIP = str);
    loadString(loader, "login_no_displayname", str -> LOGIN_NO_DISPLAY_NAME = str);
    loadString(loader, "create_displayname_tooltip", str -> CREATE_DISPLAYNAME_TOOLTIP = str);
    loadString(loader, "create_displayname_hint", str -> CREATE_DIPLAY_NAME_HINT = str);
    loadString(loader, "create_password_tooltip", str -> CREATE_PASSWORD_TOOLTIP = str);
    loadString(loader, "create_password_hint", str -> CREATE_PASSWORD_HINT = str);
    loadString(loader, "create_password_confirm_tooltip", str -> CREATE_PASSWORD_CONFIRM_TOOLTIP = str);
    loadString(loader, "create_email_tooltip", str -> CREATE_EMAIL_TOOLTIP = str);
    loadString(loader, "create_email_confirm_tooltip", str -> CREATE_EMAIL_CONFIRM_TOOLTIP = str);
    loadString(loader, "create_age_tooltip", str -> CREATE_AGE_TOOLTIP = str);
    loadString(loader, "create_optin_news_tooltip", str -> CREATE_OPT_IN_NEWS_TOOLTIP = str);
    loadString(loader, "create_username_unavailable", str -> CREATE_USERNAME_UNAVAILABLE = str);
    loadString(loader, "create_username_available", str -> CREATE_USERNAME_AVAILABLE = str);
    loadString(loader, "create_alert_namelength", str -> CREATE_ALERT_NAME_LENGTH = str);
    loadString(loader, "create_alert_namechars", str -> CREATE_ALERT_NAME_CHARS = str);
    loadString(loader, "create_alert_nameleadingspace", str -> CREATE_ALERT_NAME_LEADING_SPACE = str);
    loadString(loader, "create_alert_doublespace", str -> CREATE_ALERT_DOUBLE_SPACE = str);
    loadString(loader, "create_alert_passchars", str -> CREATE_ALERT_PASSCHARS = str);
    loadString(loader, "create_alert_passrepeated", str -> CREATE_ALERT_PASS_REPEATED = str);
    loadString(loader, "create_alert_passlength", str -> CREATE_ALERT_PASS_LENGTH = str);
    loadString(loader, "create_alert_passcontainsname", str -> CREATE_ALERT_PASS_CONTAINS_NAME = str);
    loadString(loader, "create_alert_passcontainsemail", str -> CREATE_ALERT_PASS_CONTAINS_EMAIL = str);
    loadString(loader, "create_alert_passcontainsname_partial", str -> CREATE_ALERT_PASS_CONTAINS_NAME_PARTIAL = str);
    loadString(loader, "create_alert_invalidemail", str -> CREATE_ALERT_INVALID_EMAIL = str);
    loadString(loader, "create_alert_email_unavailable", str -> CREATE_ALERT_EMAIL_UNAVAILABLE = str);
    loadString(loader, "create_alert_invaliddate", str -> CREATE_ALERT_INVALID_DATE = str);
    loadString(loader, "create_alert_invalidage", str -> CREATE_ALERT_INVALID_AGE = str);
    loadString(loader, "create_alert_yearrange", str -> CREATE_ALERT_YEAR_RANGE = str);
    loadString(loader, "create_alert_mismatch", str -> CREATE_ALERT_MISMATCH = str);
    loadString(loader, "create_passwordvalid", str -> PASSWORD_IS_VALID = str);
    loadString(loader, "create_emailvalid", str -> CREATE_EMAIL_VALID = str);
    loadString(loader, "create_account_success", str -> ACCOUNT_CREATED_SUCCESSFULLY = str);
    loadString(loader, "invalid_name", str -> INVALID_NAME = str);
    loadString(loader, "cannot_add_yourself", str -> CANNOT_ADD_YOURSELF = str);
    loadString(loader, "unable_to_add_friend", str -> UNABLE_TO_ADD_FRIEND = str);
    loadString(loader, "unable_to_add_ignore", str -> UNABLE_TO_ADD_IGNORE = str);
    loadString(loader, "unable_to_delete_friend", str -> UNABLE_TO_DELETE_FRIEND = str);
    loadString(loader, "unable_to_delete_ignore", str -> UNABLE_TO_DELETE_IGNORE = str);
    loadString(loader, "friendlistfull", str -> FRIEND_LIST_FULL = str);
    loadString(loader, "friendlistdupe", str -> FRIEND_LIST_DUPE = str);
    loadString(loader, "friendnotfound", str -> FRIEND_NOT_FOUND = str);
    loadString(loader, "ignorelistfull", str -> IGNORE_LIST_FULL = str);
    loadString(loader, "ignorelistdupe", str -> IGNORE_LIST_DUPE = str);
    loadString(loader, "ignorenotfound", str -> IGNORE_NOT_FOUND = str);
    loadString(loader, "removeignorefirst", str -> REMOVE_FROM_IGNORE_FIRST = str);
    loadString(loader, "removefriendfirst", str -> REMOVE_FRIEND_FIRST = str);
    loadString(loader, "enterfriend_add", str -> ENTER_FRIEND_ADD = str);
    loadString(loader, "enterfriend_del", str -> ENTER_FRIEND_DEL = str);
    loadString(loader, "enterignore_add", str -> ENTER_IGNORE_ADD = str);
    loadString(loader, "enterignore_del", str -> ENTER_IGNORE_DEL = str);
    loadString(loader, "text_removed_from_game", str -> TEXT_REMOVED_FROM_GAME = str);
    loadString(loader, "waitingfor_graphics", str -> WAITING_FOR_GRAPHICS = str);
    loadString(loader, "waitingfor_fonts", str -> WAITING_FOR_FONTS = str);
    loadString(loader, "waitingfor_soundeffects", str -> WAITING_FOR_SOUND_EFFECTS = str);
    loadString(loader, "waitingfor_music", str -> WAITING_FOR_MUSIC = str);
    loadString(loader, "waitingfor_extradata", str -> WAITING_FOR_EXTRA_DATA = str);
    loadString(loader, "loading_graphics", str -> LOADING_GRAPHICS = str);
    loadString(loader, "loading_fonts", str -> LOADING_FONTS = str);
    loadString(loader, "loading_soundeffects", str -> LOADING_SOUND_EFFECTS = str);
    loadString(loader, "loading_music", str -> LOADING_MUSIC = str);
    loadString(loader, "loading_extradata", str -> LOADING_EXTRA_DATA = str);
    loadString(loader, "unpacking_graphics", str -> UNPACKING_GRAPHICS = str);
    loadString(loader, "unpacking_soundeffects", str -> UNPACKING_SOUND_EFFECTS = str);
    loadString(loader, "unpacking_music", str -> UNPACKING_MUSIC = str);
    loadString(loader, "instructions", str -> INSTRUCTIONS = str);
    loadString(loader, "tutorial", str -> TUTORIAL = str);
    loadString(loader, "sound_colon", str -> SOUND_COLON = str);
    loadString(loader, "music_colon", str -> MUSIC_COLON = str);
    loadString(loader, "fullscreen", str -> FULLSCREEN = str);
    loadString(loader, "rankings", str -> RANKINGS = str);
    loadString(loader, "achievements", str -> ACHIEVEMENTS = str);
    loadString(loader, "watchintroduction", str -> WATCH_INTRODUCTION = str);
    loadString(loader, "quit", str -> QUIT = str);
    loadString(loader, "login_createaccount", str -> LOGIN_CREATE_ACCOUNT = str);
    loadString(loader, "returntomainmenu", str -> RETURN_TO_MAIN_MENU = str);
    loadString(loader, "pausemenu", str -> PAUSE_MENU = str);
    loadString(loader, "optionsmenu_notpaused", str -> OPTIONS_MENU_NOT_PAUSED = str);
    loadString(loader, "menu", str -> MENU = str);
    loadString(loader, "startgame", str -> START_GAME = str);
    loadString(loader, "endgame", str -> END_GAME = str);
    loadString(loader, "endtutorial", str -> END_TUTORIAL = str);
    loadString(loader, "ok", str -> OK = str);
    loadString(loader, "entermultiplayerlobby", str -> ENTER_MULTIPLAYER_LOBBY = str);
    loadString(loader, "returntogame", str -> RETURN_TO_GAME = str);
    loadString(loader, "offerdraw", str -> OFFER_DRAW = str);
    loadString(loader, "canceldraw", str -> CANCEL_DRAW = str);
    loadString(loader, "acceptdraw", str -> ACCEPT_DRAW = str);
    loadString(loader, "resign", str -> RESIGN = str);
    loadString(loader, "returntolobby", str -> RETURN_TO_LOBBY = str);
    loadString(loader, "cont", str -> CONT = str);
    loadString(loader, "mouseoveranicon", str -> MOUSE_OVER_AN_ICON = str);
    loadString(loader, "orbpoints", str -> ORB_POINTS = str);
    loadString(loader, "orbpoints_colon", str -> ORB_POINTS_COLON = str);
    loadString(loader, "secretachievement", str -> SECRET_ACHIEVEMENT = str);
    loadString(loader, "mp_offerrematch", str -> MP_OFFER_REMATCH = str);
    loadString(loader, "mp_offerrematch_unrated", str -> MP_OFFER_REMATCH_UNRATED = str);
    loadString(loader, "mp_acceptrematch", str -> MP_ACCEPT_REMATCH = str);
    loadString(loader, "mp_acceptrematch_unrated", str -> MP_ACCEPT_REMATCH_UNRATED = str);
    loadString(loader, "mp_cancelrematch", str -> MP_CANCEL_REMATCH = str);
    loadString(loader, "mp_cancelrematch_unrated", str -> MP_CANCEL_REMATCH_UNRATED = str);
    loadString(loader, "mp_rematchnewgame", str -> MP_REMATCH_NEW_GAME = str);
    loadString(loader, "mp_rematchnewgame_unrated", str -> MP_REMATCH_NEW_GAME_UNRATED = str);
    loadString(loader, "mp_x_wantstodraw", str -> MP_X_WANTS_TO_DRAW = str);
    loadString(loader, "mp_x_offersrematch", str -> MP_X_OFFERS_REMATCH = str);
    loadString(loader, "mp_x_offersrematch_unrated", str -> MP_X_OFFERS_REMATCH_UNRATED = str);
    loadString(loader, "mp_youofferrematch", str -> MP_YOU_OFFER_REMATCH = str);
    loadString(loader, "mp_youofferrematch_unrated", str -> MP_YOU_OFFER_REMATCH_UNRATED = str);
    loadString(loader, "mp_youofferdraw", str -> MP_YOU_OFFER_DRAW = str);
    loadString(loader, "mp_youresigned", str -> MP_YOU_RESIGNED = str);
    loadString(loader, "mp_x_hasresignedandleft", str -> MP_X_HAS_RESIGNED_AND_LEFT = str);
    loadString(loader, "mp_x_hasresigned", str -> MP_X_HAS_RESIGNED = str);
    loadString(loader, "mp_x_hasleft", str -> MP_X_HAS_LEFT = str);
    loadString(loader, "click_to_quickchat", str -> CLICK_TO_QUICKCHAT = str);
    loadString(loader, "autorespond", str -> AUTO_RESPOND = str);
    loadString(loader, "quickchat_help", str -> QUICK_CHAT_HELP = str);
    loadString(loader, "quickchat_help_title", str -> QUICK_CHAT_HELP_TITLE = str);
    loadString(loader, "quickchat_shortcut_help,0", str -> QUICK_CHAT_SHORTCUT_HELP[0] = str);
    loadString(loader, "quickchat_shortcut_help,1", str -> QUICK_CHAT_SHORTCUT_HELP[1] = str);
    loadString(loader, "quickchat_shortcut_help,2", str -> QUICK_CHAT_SHORTCUT_HELP[2] = str);
    loadString(loader, "quickchat_shortcut_help,3", str -> QUICK_CHAT_SHORTCUT_HELP[3] = str);
    loadString(loader, "quickchat_shortcut_help,4", str -> QUICK_CHAT_SHORTCUT_HELP[4] = str);
    loadString(loader, "quickchat_shortcut_help,5", str -> QUICK_CHAT_SHORTCUT_HELP[5] = str);
    loadString(loader, "quickchat_shortcut_keys,0", str -> QUICK_CHAT_SHORTCUT_KEYS[0] = str);
    loadString(loader, "quickchat_shortcut_keys,1", str -> QUICK_CHAT_SHORTCUT_KEYS[1] = str);
    loadString(loader, "quickchat_shortcut_keys,2", str -> QUICK_CHAT_SHORTCUT_KEYS[2] = str);
    loadString(loader, "quickchat_shortcut_keys,3", str -> QUICK_CHAT_SHORTCUT_KEYS[3] = str);
    loadString(loader, "quickchat_shortcut_keys,4", str -> QUICK_CHAT_SHORTCUT_KEYS[4] = str);
    loadString(loader, "quickchat_shortcut_keys,5", str -> QUICK_CHAT_SHORTCUT_KEYS[5] = str);
    loadString(loader, "keychar_the_character_under_questionmark", str -> KEYCHAR_THE_CHARACTER_UNDER_QUESTION_MARK = str.charAt(0));
    loadString(loader, "rating_noratings", str -> RATING_NO_RATINGS = str);
    loadString(loader, "rating_rating", str -> RATING_RATING = str);
    loadString(loader, "rating_played", str -> RATING_PLAYED = str);
    loadString(loader, "rating_won", str -> RATING_WON = str);
    loadString(loader, "rating_lost", str -> RATING_LOST = str);
    loadString(loader, "rating_drawn", str -> RATING_DRAWN = str);
    loadString(loader, "fs_accept_beforeaccept", str -> FS_ACCEPT_BEFORE_ACCEPT = str);
    loadString(loader, "fs_button_accept", str -> FS_BUTTON_ACCEPT = str);
    loadString(loader, "fs_accept_afteraccept", str -> FS_ACCEPT_AFTER_ACCEPT = str);
    loadString(loader, "fs_button_cancel", str -> FS_BUTTON_CANCEL = str);
    loadString(loader, "fs_accept_aftercancel", str -> FS_ACCEPT_AFTER_CANCEL = str);
    loadString(loader, "fs_accept_countdown_sing", str -> FS_ACCEPT_COUNTDOWN_SING = str);
    loadString(loader, "fs_accept_countdown_pl", str -> FS_ACCEPT_COUNTDOWN_PL = str);
    loadString(loader, "fs_nonmember", str -> FS_NONMEMBER = str);
    loadString(loader, "fs_button_close", str -> FS_BUTTON_CLOSE = str);
    loadString(loader, "fs_button_members", str -> FS_BUTTON_MEMBERS = str);
    loadString(loader, "fs_unavailable", str -> FS_UNAVAILABLE = str);
    loadString(loader, "fs_focus", str -> FS_FOCUS = str);
    loadString(loader, "fs_timeout", str -> FS_TIMEOUT = str);
    loadString(loader, "fs_button_tryagain", str -> FS_BUTTON_TRY_AGAIN = str);
    loadString(loader, "hs_mode_name,0", str -> HS_MODE_NAMES[0] = str);
    loadString(loader, "hs_mode_name,1", str -> HS_MODE_NAMES[1] = str);
    loadString(loader, "hs_mode_name,2", str -> HS_MODE_NAMES[2] = str);
    loadString(loader, "rating_mode_name,0", str -> RATING_MODE_NAMES[0] = str);
    loadString(loader, "rating_mode_name,1", str -> RATING_MODE_NAMES[1] = str);
    loadString(loader, "pleasewait_dotdotdot", str -> PLEASE_WAIT = str);
    loadString(loader, "serviceunavailable", str -> SERVICE_UNAVAILABLE = str);
    loadString(loader, "createtouse", str -> CREATE_TO_USE = str);
    loadString(loader, "achievementsoffline", str -> ACHIEVEMENTS_OFFLINE = str);
    loadString(loader, "warning", str -> WARNING = str);
    loadString(loader, "DEFAULT_PLAYER_NAME", str -> DEFAULT_PLAYER_NAME = str);
    loadString(loader, "discard", str -> DISCARD = str);
  }

  public static void loadShatteredPlans(final ResourceLoader loader) {
    loadString(loader, "achievement_names,0", str -> ACHIEVEMENT_NAMES[0] = str);
    loadString(loader, "achievement_names,1", str -> ACHIEVEMENT_NAMES[1] = str);
    loadString(loader, "achievement_names,2", str -> ACHIEVEMENT_NAMES[2] = str);
    loadString(loader, "achievement_names,3", str -> ACHIEVEMENT_NAMES[3] = str);
    loadString(loader, "achievement_names,4", str -> ACHIEVEMENT_NAMES[4] = str);
    loadString(loader, "achievement_names,5", str -> ACHIEVEMENT_NAMES[5] = str);
    loadString(loader, "achievement_names,6", str -> ACHIEVEMENT_NAMES[6] = str);
    loadString(loader, "achievement_names,7", str -> ACHIEVEMENT_NAMES[7] = str);
    loadString(loader, "achievement_names,8", str -> ACHIEVEMENT_NAMES[8] = str);
    loadString(loader, "achievement_names,9", str -> ACHIEVEMENT_NAMES[9] = str);
    loadString(loader, "achievement_names,10", str -> ACHIEVEMENT_NAMES[10] = str);
    loadString(loader, "achievement_names,11", str -> ACHIEVEMENT_NAMES[11] = str);
    loadString(loader, "achievement_names,12", str -> ACHIEVEMENT_NAMES[12] = str);
    loadString(loader, "achievement_names,13", str -> ACHIEVEMENT_NAMES[13] = str);
    loadString(loader, "achievement_names,14", str -> ACHIEVEMENT_NAMES[14] = str);
    loadString(loader, "achievement_names,15", str -> ACHIEVEMENT_NAMES[15] = str);
    loadString(loader, "achievement_names,16", str -> ACHIEVEMENT_NAMES[16] = str);
    loadString(loader, "achievement_names,17", str -> ACHIEVEMENT_NAMES[17] = str);
    loadString(loader, "achievement_names,18", str -> ACHIEVEMENT_NAMES[18] = str);
    loadString(loader, "achievement_names,19", str -> ACHIEVEMENT_NAMES[19] = str);
    loadString(loader, "achievement_names,20", str -> ACHIEVEMENT_NAMES[20] = str);
    loadString(loader, "achievement_names,21", str -> ACHIEVEMENT_NAMES[21] = str);
    loadString(loader, "achievement_names,22", str -> ACHIEVEMENT_NAMES[22] = str);
    loadString(loader, "achievement_names,23", str -> ACHIEVEMENT_NAMES[23] = str);
    loadString(loader, "achievement_names,24", str -> ACHIEVEMENT_NAMES[24] = str);
    loadString(loader, "text_no_achievement", str -> TEXT_NO_ACHIEVEMENT = str);
    loadString(loader, "achievement_criteria,0", str -> ACHIEVEMENT_CRITERIA[0] = str);
    loadString(loader, "achievement_criteria,1", str -> ACHIEVEMENT_CRITERIA[1] = str);
    loadString(loader, "achievement_criteria,2", str -> ACHIEVEMENT_CRITERIA[2] = str);
    loadString(loader, "achievement_criteria,3", str -> ACHIEVEMENT_CRITERIA[3] = str);
    loadString(loader, "achievement_criteria,4", str -> ACHIEVEMENT_CRITERIA[4] = str);
    loadString(loader, "achievement_criteria,5", str -> ACHIEVEMENT_CRITERIA[5] = str);
    loadString(loader, "achievement_criteria,6", str -> ACHIEVEMENT_CRITERIA[6] = str);
    loadString(loader, "achievement_criteria,7", str -> ACHIEVEMENT_CRITERIA[7] = str);
    loadString(loader, "achievement_criteria,8", str -> ACHIEVEMENT_CRITERIA[8] = str);
    loadString(loader, "achievement_criteria,9", str -> ACHIEVEMENT_CRITERIA[9] = str);
    loadString(loader, "achievement_criteria,10", str -> ACHIEVEMENT_CRITERIA[10] = str);
    loadString(loader, "achievement_criteria,11", str -> ACHIEVEMENT_CRITERIA[11] = str);
    loadString(loader, "achievement_criteria,12", str -> ACHIEVEMENT_CRITERIA[12] = str);
    loadString(loader, "achievement_criteria,13", str -> ACHIEVEMENT_CRITERIA[13] = str);
    loadString(loader, "achievement_criteria,14", str -> ACHIEVEMENT_CRITERIA[14] = str);
    loadString(loader, "achievement_criteria,15", str -> ACHIEVEMENT_CRITERIA[15] = str);
    loadString(loader, "achievement_criteria,16", str -> ACHIEVEMENT_CRITERIA[16] = str);
    loadString(loader, "achievement_criteria,17", str -> ACHIEVEMENT_CRITERIA[17] = str);
    loadString(loader, "achievement_criteria,18", str -> ACHIEVEMENT_CRITERIA[18] = str);
    loadString(loader, "achievement_criteria,19", str -> ACHIEVEMENT_CRITERIA[19] = str);
    loadString(loader, "achievement_criteria,20", str -> ACHIEVEMENT_CRITERIA[20] = str);
    loadString(loader, "achievement_criteria,21", str -> ACHIEVEMENT_CRITERIA[21] = str);
    loadString(loader, "achievement_criteria,22", str -> ACHIEVEMENT_CRITERIA[22] = str);
    loadString(loader, "achievement_criteria,23", str -> ACHIEVEMENT_CRITERIA[23] = str);
    loadString(loader, "achievement_criteria,24", str -> ACHIEVEMENT_CRITERIA[24] = str);
    loadString(loader, "achievements_rated_only", str -> ACHIEVEMENTS_RATED_ONLY = str);
    loadString(loader, "gameoptlabels,0", str -> GAMEOPT_LABELS[0] = str);
    loadString(loader, "gameoptlabels,1", str -> GAMEOPT_LABELS[1] = str);
    loadString(loader, "gameoptlabels,2", str -> GAMEOPT_LABELS[2] = str);
    loadString(loader, "gameoptlabels,3", str -> GAMEOPT_LABELS[3] = str);
    loadString(loader, "gameoptlabels,4", str -> GAMEOPT_LABELS[4] = str);
    loadString(loader, "gameoptlabels,5", str -> GAMEOPT_LABELS[5] = str);
    loadString(loader, "gameoptnames,1,0", str -> GAMEOPT_NAMES[1][0] = str);
    loadString(loader, "gameoptnames,1,1", str -> GAMEOPT_NAMES[1][1] = str);
    loadString(loader, "gameoptnames,1,2", str -> GAMEOPT_NAMES[1][2] = str);
    loadString(loader, "gameoptnames,1,3", str -> GAMEOPT_NAMES[1][3] = str);
    loadString(loader, "gameoptnames,1,4", str -> GAMEOPT_NAMES[1][4] = str);
    loadString(loader, "gameoptnames,1,5", str -> GAMEOPT_NAMES[1][5] = str);
    loadString(loader, "gameoptnames,1,6", str -> GAMEOPT_NAMES[1][6] = str);
    loadString(loader, "gameoptnames,2,0", str -> GAMEOPT_NAMES[2][0] = str);
    loadString(loader, "gameoptnames,2,1", str -> GAMEOPT_NAMES[2][1] = str);
    loadString(loader, "gameoptnames,2,2", str -> GAMEOPT_NAMES[2][2] = str);
    loadString(loader, "gameoptnames,2,3", str -> GAMEOPT_NAMES[2][3] = str);
    loadString(loader, "gameoptnames,3,0", str -> GAMEOPT_NAMES[3][0] = str);
    loadString(loader, "gameoptnames,3,1", str -> GAMEOPT_NAMES[3][1] = str);
    loadString(loader, "gameoptnames,3,2", str -> GAMEOPT_NAMES[3][2] = str);
    loadString(loader, "gameoptnames,3,3", str -> GAMEOPT_NAMES[3][3] = str);
    loadString(loader, "gameoptnames,3,4", str -> GAMEOPT_NAMES[3][4] = str);
    loadString(loader, "gameoptnames,4,0", str -> GAMEOPT_NAMES[4][0] = str);
    loadString(loader, "gameoptnames,4,1", str -> GAMEOPT_NAMES[4][1] = str);
    loadString(loader, "gametypeTooltips,0", str -> GAME_TYPE_TOOLTIPS[0] = str);
    loadString(loader, "gametypeTooltips,1", str -> GAME_TYPE_TOOLTIPS[1] = str);
    loadString(loader, "gametypeTooltips,2", str -> GAME_TYPE_TOOLTIPS[2] = str);
    loadString(loader, "gametypeTooltips,3", str -> GAME_TYPE_TOOLTIPS[3] = str);
    loadString(loader, "rulesetTooltips,0", str -> RULESET_TOOLTIPS[0] = str);
    loadString(loader, "rulesetTooltips,1", str -> RULESET_TOOLTIPS[1] = str);
    loadString(loader, "empire_names,0", str -> EMPIRE_NAMES[0] = str);
    loadString(loader, "empire_names,1", str -> EMPIRE_NAMES[1] = str);
    loadString(loader, "empire_names,2", str -> EMPIRE_NAMES[2] = str);
    loadString(loader, "empire_names,3", str -> EMPIRE_NAMES[3] = str);
    loadString(loader, "empire_names,4", str -> EMPIRE_NAMES[4] = str);
    loadString(loader, "empire_names,5", str -> EMPIRE_NAMES[5] = str);
    loadString(loader, "resource_names,0", str -> RESOURCE_NAMES[0] = str);
    loadString(loader, "resource_names,1", str -> RESOURCE_NAMES[1] = str);
    loadString(loader, "resource_names,2", str -> RESOURCE_NAMES[2] = str);
    loadString(loader, "resource_names,3", str -> RESOURCE_NAMES[3] = str);
    loadString(loader, "project_names,0", str -> PROJECT_NAMES[0] = str);
    loadString(loader, "project_names,1", str -> PROJECT_NAMES[1] = str);
    loadString(loader, "project_names,2", str -> PROJECT_NAMES[2] = str);
    loadString(loader, "project_names,3", str -> PROJECT_NAMES[3] = str);
    loadString(loader, "instructions_tabnames,0", str -> INSTRUCTIONS_TABNAMES[0] = str);
    loadString(loader, "instructions_tabnames,1", str -> INSTRUCTIONS_TABNAMES[1] = str);
    loadString(loader, "instructions_tabnames,2", str -> INSTRUCTIONS_TABNAMES[2] = str);
    loadString(loader, "instructions_tabnames,3", str -> INSTRUCTIONS_TABNAMES[3] = str);
    loadString(loader, "instructions_tabnames,4", str -> INSTRUCTIONS_TABNAMES[4] = str);
    loadString(loader, "instructions_tabnames,5", str -> INSTRUCTIONS_TABNAMES[5] = str);
    loadString(loader, "instructions_tabnames,6", str -> INSTRUCTIONS_TABNAMES[6] = str);
    loadString(loader, "instructions_tabnames,7", str -> INSTRUCTIONS_TABNAMES[7] = str);
    loadString(loader, "instructions_tabnames,8", str -> INSTRUCTIONS_TABNAMES[8] = str);
    loadString(loader, "instructions_tabnames,9", str -> INSTRUCTIONS_TABNAMES[9] = str);
    loadString(loader, "instructions_tabnames,10", str -> INSTRUCTIONS_TABNAMES[10] = str);
    loadString(loader, "TEXT_INTRO0,0", str -> TEXT_INTRO_0[0] = str);
    loadString(loader, "TEXT_INTRO0,1", str -> TEXT_INTRO_0[1] = str);
    loadString(loader, "TEXT_INTRO1_START", str -> TEXT_INTRO_1_START = str);
    loadString(loader, "TEXT_INTRO1_END", str -> TEXT_INTRO_1_END = str);
    loadString(loader, "TEXT_INTRO2_START", str -> TEXT_INTRO_2_START = str);
    loadString(loader, "TEXT_INTRO2_END", str -> TEXT_INTRO_2_END = str);
    loadString(loader, "TEXT_INTRO3_START", str -> TEXT_INTRO_3_START = str);
    loadString(loader, "TEXT_INTRO4_START", str -> TEXT_INTRO_4_START = str);
    loadString(loader, "TEXT_INTRO4_END", str -> TEXT_INTRO_4_END = str);
    loadString(loader, "text_skipintro", str -> TEXT_SKIP_INTRO = str);
    loadString(loader, "pact_offer", str -> PACT_OFFER = str);
    loadString(loader, "pact_accept", str -> PACT_ACCEPT = str);
    loadString(loader, "pact_awaiting", str -> PACT_AWAITING = str);
    loadString(loader, "pact_expires", str -> PACT_EXPIRES = str);
    loadString(loader, "hint_select_src", str -> HINT_SELECT_SRC = str);
    loadString(loader, "hint_select_dest", str -> HINT_SELECT_DEST = str);
    loadString(loader, "hint_placement", str -> HINT_PLACEMENT = str);
    loadString(loader, "hint_defensegrid", str -> HINT_DEFENSEGRID = str);
    loadString(loader, "hint_terraform", str -> HINT_TERRAFORM = str);
    loadString(loader, "hint_flare", str -> HINT_FLARE = str);
    loadString(loader, "hint_select_gate_src", str -> HINT_SELECT_GATE_SRC = str);
    loadString(loader, "hint_select_gate_dest", str -> HINT_SELECT_GATE_DEST = str);
    loadString(loader, "hint_cancel", str -> HINT_CANCEL_PROJECT = str);
    loadString(loader, "text_waitingforplayer", str -> TEXT_WAITING_FOR_PLAYER = str);
    loadString(loader, "text_waitingforplayers", str -> WAITING_FOR_N_PLAYERS = str);
    loadString(loader, "text_youhavebeendefeated", str -> TEXT_YOU_HAVE_BEEN_DEFEATED = str);
    loadString(loader, "text_victory", str -> TEXT_VICTORY = str);
    loadString(loader, "text_defeat", str -> TEXT_DEFEAT = str);
    loadString(loader, "text_peace_short", str -> TEXT_PEACE_SHORT = str);
    loadString(loader, "text_peace", str -> TEXT_PEACE = str);
    loadString(loader, "text_peace2", str -> TEXT_PEACE_2 = str);
    loadString(loader, "text_peace3", str -> TEXT_PEACE_3 = str);
    loadString(loader, "text_playerHasWon", str -> TEXT_PLAYER_HAS_WON = str);
    loadString(loader, "text_togglestats", str -> TEXT_TOGGLE_STATS = str);
    loadString(loader, "text_togglestats2", str -> TEXT_TOGGLE_STATS_2 = str);
    loadString(loader, "text_esctoexit", str -> TEXT_ESC_TO_EXIT = str);
    loadString(loader, "text_defeated", str -> TEXT_DEFEATED = str);
    loadString(loader, "text_resigned", str -> TEXT_RESIGNED = str);
    loadString(loader, "text_join_final", str -> TEXT_JOIN_FINAL = str);
    loadString(loader, "text_join", str -> TEXT_JOIN = str);
    loadString(loader, "text_decimal", str -> TEXT_DECIMAL = str);
    loadString(loader, "turn_ordinal", str -> TURN_ORDINAL = str);
    loadString(loader, "turn_name", str -> TURN_NAME = str);
    loadString(loader, "turn_name_first", str -> TURN_NAME_FIRST = str);
    loadString(loader, "turnObjective", str -> TURN_OBJECTIVE = str);
    loadString(loader, "turnOnePoint", str -> TURN_ONE_POINT = str);
    loadString(loader, "turnPoints", str -> TURN_POINTS = str);
    loadString(loader, "turnFewerShips", str -> TURN_FEWER_SHIPS = str);
    loadString(loader, "turn_name1,0", str -> TURN_NAMES_1[0] = str);
    loadString(loader, "turn_name1,1", str -> TURN_NAMES_1[1] = str);
    loadString(loader, "turn_name1,2", str -> TURN_NAMES_1[2] = str);
    loadString(loader, "turn_name1,3", str -> TURN_NAMES_1[3] = str);
    loadString(loader, "turn_name1,4", str -> TURN_NAMES_1[4] = str);
    loadString(loader, "turn_name1,5", str -> TURN_NAMES_1[5] = str);
    loadString(loader, "turn_name1,6", str -> TURN_NAMES_1[6] = str);
    loadString(loader, "turn_name1,7", str -> TURN_NAMES_1[7] = str);
    loadString(loader, "turn_name1,8", str -> TURN_NAMES_1[8] = str);
    loadString(loader, "turn_name1,9", str -> TURN_NAMES_1[9] = str);
    loadString(loader, "turn_name1,10", str -> TURN_NAMES_1[10] = str);
    loadString(loader, "turn_name1,11", str -> TURN_NAMES_1[11] = str);
    loadString(loader, "turn_name1,12", str -> TURN_NAMES_1[12] = str);
    loadString(loader, "turn_name1,13", str -> TURN_NAMES_1[13] = str);
    loadString(loader, "turn_name1,14", str -> TURN_NAMES_1[14] = str);
    loadString(loader, "turn_name1,15", str -> TURN_NAMES_1[15] = str);
    loadString(loader, "turn_name1,16", str -> TURN_NAMES_1[16] = str);
    loadString(loader, "turn_name1,17", str -> TURN_NAMES_1[17] = str);
    loadString(loader, "turn_name1,18", str -> TURN_NAMES_1[18] = str);
    loadString(loader, "turn_name1,19", str -> TURN_NAMES_1[19] = str);
    loadString(loader, "turn_name1,20", str -> TURN_NAMES_1[20] = str);
    loadString(loader, "turn_name1,21", str -> TURN_NAMES_1[21] = str);
    loadString(loader, "turn_name2,0", str -> TURN_NAMES_2[0] = str);
    loadString(loader, "turn_name2,1", str -> TURN_NAMES_2[1] = str);
    loadString(loader, "turn_name2,2", str -> TURN_NAMES_2[2] = str);
    loadString(loader, "turn_name2,3", str -> TURN_NAMES_2[3] = str);
    loadString(loader, "turn_name2,4", str -> TURN_NAMES_2[4] = str);
    loadString(loader, "turn_name2,5", str -> TURN_NAMES_2[5] = str);
    loadString(loader, "turn_name2,6", str -> TURN_NAMES_2[6] = str);
    loadString(loader, "turn_name2,7", str -> TURN_NAMES_2[7] = str);
    loadString(loader, "turn_name2,8", str -> TURN_NAMES_2[8] = str);
    loadString(loader, "turn_name2,9", str -> TURN_NAMES_2[9] = str);
    loadString(loader, "turn_name2,10", str -> TURN_NAMES_2[10] = str);
    loadString(loader, "turn_name2,11", str -> TURN_NAMES_2[11] = str);
    loadString(loader, "turn_name2,12", str -> TURN_NAMES_2[12] = str);
    loadString(loader, "turn_name2,13", str -> TURN_NAMES_2[13] = str);
    loadString(loader, "turn_name2,14", str -> TURN_NAMES_2[14] = str);
    loadString(loader, "turn_name2,15", str -> TURN_NAMES_2[15] = str);
    loadString(loader, "turn_name2,16", str -> TURN_NAMES_2[16] = str);
    loadString(loader, "turn_name2,17", str -> TURN_NAMES_2[17] = str);
    loadString(loader, "turn_name2,18", str -> TURN_NAMES_2[18] = str);
    loadString(loader, "derelict", str -> DERELICT = str);
    loadString(loader, "text_instructions0", str -> TEXT_INSTRUCTIONS_0 = str);
    loadString(loader, "text_instructions_glossary1", str -> TEXT_INSTRUCTIONS_GLOSSARY_1 = str);
    loadString(loader, "text_instructions_glossary2", str -> TEXT_INSTRUCTIONS_GLOSSARY_2 = str);
    loadString(loader, "text_instructions_mv_time", str -> TEXT_INSTRUCTIONS_MV_TIME = str);
    loadString(loader, "text_instructions_mv_wormhole", str -> TEXT_INSTRUCTIONS_MV_WORMHOLE = str);
    loadString(loader, "text_instructions_mv_frame", str -> TEXT_INSTRUCTIONS_MV_FRAME = str);
    loadString(loader, "text_instructions_mv_ready", str -> TEXT_INSTRUCTIONS_MV_READY = str);
    loadString(loader, "text_instructions_mv_order", str -> TEXT_INSTRUCTIONS_MV_ORDER = str);
    loadString(loader, "text_instructions_sf_outgoing", str -> TEXT_INSTRUCTIONS_SF_OUTGOING = str);
    loadString(loader, "text_instructions_sf_garrison", str -> TEXT_INSTRUCTIONS_SF_GARRISON = str);
    loadString(loader, "text_instructions_sf_name", str -> TEXT_INSTRUCTIONS_SF_NAME = str);
    loadString(loader, "text_instructions_sf_resources", str -> TEXT_INSTRUCTIONS_SF_RESOURCES = str);
    loadString(loader, "text_instructions_sf_incoming", str -> TEXT_INSTRUCTIONS_SF_INCOMING = str);
    loadString(loader, "text_instructions_icon_terraformed", str -> TEXT_INSTRUCTIONS_ICON_TERRAFORMED = str);
    loadString(loader, "text_instructions_icon_neutral", str -> TEXT_INSTRUCTIONS_ICON_NEUTRAL = str);
    loadString(loader, "text_instructions_icon_homeworld", str -> TEXT_INSTRUCTIONS_ICON_HOMEWORLD = str);
    loadString(loader, "text_instructions_placement", str -> TEXT_INSTRUCTIONS_PLACEMENT = str);
    loadString(loader, "text_instructions_movement", str -> TEXT_INSTRUCTIONS_MOVEMENT = str);
    loadString(loader, "text_instructions_projects", str -> TEXT_INSTRUCTIONS_PROJECTS = str);
    loadString(loader, "text_instructions_fleetsize", str -> TEXT_INSTRUCTIONS_FLEETSIZE = str);
    loadString(loader, "text_instructions_endturn", str -> TEXT_INSTRUCTIONS_END_TURN = str);
    loadString(loader, "text_instructions_hotkeys", str -> TEXT_INSTRUCTIONS_HOTKEYS = str);
    loadString(loader, "text_instructions_stats", str -> TEXT_INSTRUCTIONS_STATS = str);
    loadString(loader, "text_instructions_project_metal", str -> TEXT_INSTRUCTIONS_PROJECT_METAL = str);
    loadString(loader, "text_instructions_project_biomass", str -> TEXT_INSTRUCTIONS_PROJECT_BIOMASS = str);
    loadString(loader, "text_instructions_project_energy", str -> TEXT_INSTRUCTIONS_PROJECT_ENERGY = str);
    loadString(loader, "text_instructions_project_exotics", str -> TEXT_INSTRUCTIONS_PROJECT_EXOTICS = str);
    loadString(loader, "text_instructions_animation", str -> TEXT_INSTRUCTIONS_ANIMATION = str);
    loadString(loader, "text_instructions_animation_fleetmove", str -> TEXT_INSTRUCTIONS_ANIMATION_FLEETMOVE = str);
    loadString(loader, "text_instructions_animation_combat", str -> TEXT_INSTRUCTIONS_ANIMATION_COMBAT = str);
    loadString(loader, "text_instructions_animation_damaged", str -> TEXT_INSTRUCTIONS_ANIMATION_DAMAGED = str);
    loadString(loader, "text_instructions_animation_captured", str -> TEXT_INSTRUCTIONS_ANIMATION_CAPTURED = str);
    loadString(loader, "text_instructions_animation_project", str -> TEXT_INSTRUCTIONS_ANIMATION_PROJECT = str);
    loadString(loader, "text_instructions_gametype", str -> TEXT_INSTRUCTIONS_GAME_TYPE = str);
    loadString(loader, "text_instructions_classic", str -> TEXT_INSTRUCTIONS_CLASSIC = str);
    loadString(loader, "text_instructions_classic_stellarbomb", str -> TEXT_INSTRUCTIONS_CLASSIC_STELLAR_BOMB = str);
    loadString(loader, "text_animating_moves", str -> TEXT_ANIMATING_MOVES = str);
    loadString(loader, "text_animating_combat", str -> TEXT_ANIMATING_COMBAT = str);
    loadString(loader, "text_animating_results", str -> SHOWING_COMBAT_RESULTS = str);
    loadString(loader, "text_animating_collapse", str -> TEXT_ANIMATING_COLLAPSE = str);
    loadString(loader, "tutorial_continue", str -> TUTORIAL_CONTINUE = str);
    loadString(loader, "tutorial_continue2", str -> TUTORIAL_CONTINUE_2 = str);
    loadString(loader, "tutorial_continue3", str -> TUTORIAL_CONTINUE_3 = str);
    loadString(loader, "tutorial_continuekey", str -> TUTORIAL_CONTINUE_KEY = str);
    loadString(loader, "tutorial_balanced", str -> TUTORIAL_BALANCED = str);
    loadString(loader, "tutorial_shortfall1", str -> TUTORIAL_SHORTFALL1 = str);
    loadString(loader, "tutorial_shortfall2a", str -> TUTORIAL_SHORTFALL2A = str);
    loadString(loader, "tutorial_shortfall2b", str -> TUTORIAL_SHORTFALL_2B = str);
    loadString(loader, "tutorial_retreating_single", str -> FLEET_HAS_RETREATED_TO = str);
    loadString(loader, "tutorial_retreating_multiple", str -> TUTORIAL_RETREATING_MULTIPLE = str);
    loadString(loader, "tutorial_lost_none", str -> TUTORIAL_LOST_NONE = str);
    loadString(loader, "tutorial_lost_single", str -> TUTORIAL_LOST_SINGLE = str);
    loadString(loader, "tutorial_lost_multiple", str -> TUTORIAL_LOST_MULTIPLE = str);
    loadString(loader, "tutorial_capture_all", str -> TUTORIAL_CAPTURE_ALL = str);
    loadString(loader, "tutorial_exit", str -> TUTORIAL_EXIT = str);
    loadString(loader, "tabname_territories", str -> TAB_NAME_PRODUCTION = str);
    loadString(loader, "tabname_uioptions", str -> TAB_NAME_UI_OPTIONS = str);
    loadString(loader, "tabname_fleetinfo", str -> TAB_NAME_FLEET_INFO = str);
    loadString(loader, "tabname_diplomacy", str -> TAB_NAME_DIPLOMACY = str);
    loadString(loader, "tabname_projects", str -> TAB_NAME_PROJECTS = str);
    loadString(loader, "tabname_messages", str -> TAB_NAME_MESSAGES = str);
    loadString(loader, "tabname_victory", str -> TAB_NAME_VICTORY = str);
    loadString(loader, "message_incoming_offers", str -> MESSAGE_INCOMING_OFFERS = str);
    loadString(loader, "text_enemyproduction", str -> TEXT_ENEMY_PRODUCTION = str);
    loadString(loader, "text_ships", str -> TEXT_SHIPS = str);
    loadString(loader, "text_production", str -> TEXT_PRODUCTION = str);
    loadString(loader, "text_systems", str -> TEXT_SYSTEMS = str);
    loadString(loader, "text_overview", str -> TEXT_OVERVIEW = str);
    loadString(loader, "text_ready", str -> TEXT_READY = str);
    loadString(loader, "text_pending", str -> PENDING = str);
    loadString(loader, "text_notavailable", str -> TEXT_NOT_AVAILABLE = str);
    loadString(loader, "text_percentage", str -> TEXT_PERCENTAGE = str);
    loadString(loader, "text_ordinals,0", str -> TEXT_ORDINALS[0] = str);
    loadString(loader, "text_ordinals,1", str -> TEXT_ORDINALS[1] = str);
    loadString(loader, "text_ordinals,2", str -> TEXT_ORDINALS[2] = str);
    loadString(loader, "text_ordinals,3", str -> TEXT_ORDINALS[3] = str);
    loadString(loader, "text_ordinals,4", str -> TEXT_ORDINALS[4] = str);
    loadString(loader, "text_ordinals,5", str -> TEXT_ORDINALS[5] = str);
    loadString(loader, "text_error", str -> TEXT_ERROR = str);
    loadString(loader, "text_stat_max_total_fleet_size", str -> TEXT_STAT_MAX_TOTAL_FLEET_SIZE = str);
    loadString(loader, "text_stat_ships_destroyed", str -> TEXT_STAT_SHIPS_DESTROYED = str);
    loadString(loader, "text_stat_ships_lost", str -> TEXT_STAT_SHIPS_LOST = str);
    loadString(loader, "text_stat_avg_move_size", str -> TEXT_STAT_AVG_MOVE_SIZE = str);
    loadString(loader, "text_stat_max_production", str -> TEXT_STAT_MAX_PRODUCTION = str);
    loadString(loader, "text_stat_ships_constructed", str -> TEXT_STAT_SHIPS_CONSTRUCTED = str);
    loadString(loader, "text_stat_projects_used", str -> TEXT_STAT_PROJECTS_USED = str);
    loadString(loader, "text_stat_research_wasted", str -> TEXT_STAT_RESEARCH_WASTED = str);
    loadString(loader, "text_stat_attacks_successful", str -> TEXT_STAT_ATTACKS_SUCCESSFUL = str);
    loadString(loader, "text_stat_attacks_failed", str -> TEXT_STAT_ATTACKS_FAILED = str);
    loadString(loader, "text_stat_defences_successful", str -> TEXT_STAT_DEFENCES_SUCCESSFUL = str);
    loadString(loader, "text_stat_defences_failed", str -> TEXT_STAT_DEFENCES_FAILED = str);
    loadString(loader, "text_stat_efficiency", str -> TEXT_STAT_EFFICIENCY = str);
    loadString(loader, "text_stat_fluidity", str -> TEXT_STAT_FLUIDITY = str);
    loadString(loader, "text_stat_aggressiveness", str -> TEXT_STAT_AGGRESSIVENESS = str);
    loadString(loader, "text_stat_solidity", str -> TEXT_STAT_SOLIDITY = str);
    loadString(loader, "text_stat_desc_max_total_fleet_size", str -> TEXT_STAT_DESC_MAX_TOTAL_FLEET_SIZE = str);
    loadString(loader, "text_stat_desc_ships_destroyed", str -> TEXT_STAT_DESC_SHIPS_DESTROYED = str);
    loadString(loader, "text_stat_desc_ships_lost", str -> TEXT_STAT_DESC_SHIPS_LOST = str);
    loadString(loader, "text_stat_desc_avg_move_size", str -> TEXT_STAT_DESC_AVG_MOVE_SIZE = str);
    loadString(loader, "text_stat_desc_max_production", str -> TEXT_STAT_DESC_MAX_PRODUCTION = str);
    loadString(loader, "text_stat_desc_ships_constructed", str -> TEXT_STAT_DESC_SHIPS_CONSTRUCTED = str);
    loadString(loader, "text_stat_desc_projects_used", str -> TEXT_STAT_DESC_PROJECTS_USED = str);
    loadString(loader, "text_stat_desc_research_wasted", str -> TEXT_STAT_DESC_RESEARCH_WASTED = str);
    loadString(loader, "text_stat_desc_attacks_successful", str -> TEXT_STAT_DESC_ATTACKS_SUCCESSFUL = str);
    loadString(loader, "text_stat_desc_attacks_failed", str -> TEXT_STAT_DESC_ATTACKS_FAILED = str);
    loadString(loader, "text_stat_desc_defences_successful", str -> TEXT_STAT_DESC_DEFENCES_SUCCESSFUL = str);
    loadString(loader, "text_stat_desc_defences_failed", str -> TEXT_STAT_DESC_DEFENCES_FAILED = str);
    loadString(loader, "text_stat_desc_efficiency", str -> TEXT_STAT_DESC_EFFICIENCY = str);
    loadString(loader, "text_stat_desc_fluidity", str -> TEXT_STAT_DESC_FLUIDITY = str);
    loadString(loader, "text_stat_desc_aggressiveness", str -> TEXT_STAT_DESC_AGGRESSIVENESS = str);
    loadString(loader, "text_stat_desc_solidity", str -> TEXT_STAT_DESC_SOLIDITY = str);
    loadString(loader, "rated_membersonly", str -> RATED_MEMBERS_ONLY = str);
    loadString(loader, "text_skirmish", str -> TEXT_SKIRMISH = str);
    loadString(loader, "text_totalplayers", str -> TEXT_TOTAL_PLAYERS = str);
    loadString(loader, "text_human_players", str -> TEXT_HUMAN_PLAYERS = str);
    loadString(loader, "text_map_hex", str -> TEXT_MAP_HEX = str);
    loadString(loader, "text_map_sol", str -> TEXT_MAP_SOL = str);
    loadString(loader, "text_map_points", str -> TEXT_MAP_POINTS = str);
    loadString(loader, "text_map_derelicts", str -> TEXT_MAP_DERELICTS = str);
    loadString(loader, "text_garrison_yes", str -> TEXT_GARRISON_YES = str);
    loadString(loader, "text_garrison_no", str -> TEXT_GARRISON_NO = str);
    loadString(loader, "text_skirmish_start", str -> START_SKIRMISH = str);
    loadString(loader, "track_name_new", str -> TRACK_NAME_NEW = str);
    loadString(loader, "track_name_old", str -> TRACK_NAME_OLD = str);
    loadString(loader, "text_showChat", str -> TEXT_SHOW_CHAT = str);
    loadString(loader, "text_hideChat", str -> TEXT_HIDE_CHAT = str);
    loadString(loader, "aichat,0,0", str -> AI_CHAT[0][0] = str);
    loadString(loader, "aichat,1,0", str -> AI_CHAT[1][0] = str);
    loadString(loader, "aichat,2,0", str -> AI_CHAT[2][0] = str);
    loadString(loader, "aichat,3,0", str -> AI_CHAT[3][0] = str);
    loadString(loader, "aichat,4,0", str -> AI_CHAT[4][0] = str);
    loadString(loader, "aichat,5,0", str -> AI_CHAT[5][0] = str);
    loadString(loader, "aichat,6,0", str -> AI_CHAT[6][0] = str);
    loadString(loader, "aichat,7,0", str -> AI_CHAT[7][0] = str);
    loadString(loader, "aichat,8,0", str -> AI_CHAT[8][0] = str);
    loadString(loader, "aichat,9,0", str -> AI_CHAT[9][0] = str);
    loadString(loader, "aichat,10,0", str -> AI_CHAT[10][0] = str);
    loadString(loader, "aichat,11,0", str -> AI_CHAT[11][0] = str);
    loadString(loader, "aichat,12,0", str -> AI_CHAT[12][0] = str);
    loadString(loader, "aichat,13,0", str -> AI_CHAT[13][0] = str);
    loadString(loader, "aichat,14,0", str -> AI_CHAT[14][0] = str);
    loadString(loader, "aichat,15,0", str -> AI_CHAT[15][0] = str);
    loadString(loader, "aichat,16,0", str -> AI_CHAT[16][0] = str);
    loadString(loader, "aichat,17,0", str -> AI_CHAT[17][0] = str);
    loadString(loader, "aichat,18,0", str -> AI_CHAT[18][0] = str);
    loadString(loader, "aichat,19,0", str -> AI_CHAT[19][0] = str);
    loadString(loader, "aichat,19,1", str -> AI_CHAT[19][1] = str);
    loadString(loader, "aichat,20,0", str -> AI_CHAT[20][0] = str);
    loadString(loader, "aichat,21,0", str -> AI_CHAT[21][0] = str);
    loadString(loader, "aichat,22,0", str -> AI_CHAT[22][0] = str);
    loadString(loader, "aichat,23,0", str -> AI_CHAT[23][0] = str);
    loadString(loader, "aichat,24,0", str -> AI_CHAT[24][0] = str);
    loadString(loader, "aichat,24,1", str -> AI_CHAT[24][1] = str);
    loadString(loader, "aichat,24,2", str -> AI_CHAT[24][2] = str);
    loadString(loader, "aichat,25,0", str -> AI_CHAT[25][0] = str);
    loadString(loader, "aichat,26,0", str -> AI_CHAT[26][0] = str);
    loadString(loader, "aitypes,0", str -> AI_TYPES[0] = str);
    loadString(loader, "aitypes,1", str -> AI_TYPES[1] = str);
    loadString(loader, "aitypes,2", str -> AI_TYPES[2] = str);
    loadString(loader, "aitypes,3", str -> AI_TYPES[3] = str);
    loadString(loader, "aitypes,4", str -> AI_TYPES[4] = str);
    loadString(loader, "aitypes,5", str -> AI_TYPES[5] = str);
    loadString(loader, "aitypes,6", str -> AI_TYPES[6] = str);
    loadString(loader, "aitypes,7", str -> AI_TYPES[7] = str);
    loadString(loader, "aitypes,8", str -> AI_TYPES[8] = str);
    loadString(loader, "tooltipIncome,0", str -> TOOLTIP_INCOME[0] = str);
    loadString(loader, "tooltipIncome,1", str -> TOOLTIP_INCOME[1] = str);
    loadString(loader, "tooltipIncome,2", str -> TOOLTIP_INCOME[2] = str);
    loadString(loader, "tooltipIncome,3", str -> TOOLTIP_INCOME[3] = str);
    loadString(loader, "tooltipIncomingLimiting", str -> TOOLTIP_INCOME_LIMITING = str);
    loadString(loader, "tooltipTotalFleetProduction", str -> TOOLTIP_TOTAL_FLEET_PRODUCTION = str);
    loadString(loader, "tooltipPlaceFleets", str -> TOOLTIP_PLACE_FLEETS = str);
    loadString(loader, "tooltipPlaceFleetsStop", str -> TOOLTIP_PLACE_FLEET_STOP = str);
    loadString(loader, "tooltipFleetsRemaining", str -> TOOLTIP_FLEETS_REMAINING = str);
    loadString(loader, "tooltipOneFleetRemaining", str -> TOOLTIP_ONE_FLEET_REMAINING = str);
    loadString(loader, "tooltipAllFleetsPlaced", str -> TOOLTIP_ALL_FLEETS_PLACED = str);
    loadString(loader, "tooltipOfferTreaty", str -> TOOLTIP_OFFER_TREATY = str);
    loadString(loader, "tooltipAcceptTreaty", str -> TOOLTIP_ACCEPT_TREATY = str);
    loadString(loader, "tooltipWaitTreaty", str -> TOOLTIP_WAIT_TREATY = str);
    loadString(loader, "tooltipPartiallyComplete", str -> TOOLTIP_PARTIALLY_COMPLETE = str);
    loadString(loader, "tooltipProjectComplete", str -> TOOLTIP_PROJECT_COMPLETE = str);
    loadString(loader, "tooltipProjectPending", str -> TOOLTIP_PROJECT_PENDING = str);
    loadString(loader, "tooltipProductionButtonShow", str -> TOOLTIP_PRODUCTION_BUTTON_SHOW = str);
    loadString(loader, "tooltipProjectsButtonShow", str -> TOOLTIP_PROJECTS_BUTTON_SHOW = str);
    loadString(loader, "tooltipDiplomacyButtonShow", str -> TOOLTIP_DIPLOMACY_BUTTON_SHOW = str);
    loadString(loader, "tooltipFleetInfoButtonShow", str -> TOOLTIP_FLEET_INFO_BUTTON_SHOW = str);
    loadString(loader, "tooltipVictoryButtonShow", str -> TOOLTIP_VICTORY_BUTTON_SHOW = str);
    loadString(loader, "tooltipProductionButtonHide", str -> TOOLTIP_PRODUCTION_BUTTON_HIDE = str);
    loadString(loader, "tooltipProjectsButtonHide", str -> TOOLTIP_PROJECTS_BUTTON_HIDE = str);
    loadString(loader, "tooltipDiplomacyButtonHide", str -> TOOLTIP_DIPLOMACY_BUTTON_HIDE = str);
    loadString(loader, "tooltipFleetInfoButtonHide", str -> TOOLTIP_FLEET_INFO_BUTTON_HIDE = str);
    loadString(loader, "tooltipEndTurn", str -> TOOLTIP_END_TURN = str);
    loadString(loader, "tooltipVictoryPaneManyMany", str -> TOOLTIP_VICTORY_PANE_MANY_MANY = str);
    loadString(loader, "tooltipVictoryPaneOneOne", str -> ONE_POINT_1_PER_TURN = str);
    loadString(loader, "tooltipVictoryPaneOneMany", str -> TOOLTIP_VICTORY_PANE_ONE_MANY = str);
    loadString(loader, "tooltipVictoryPaneManyOne", str -> N_POINTS_1_PER_TURN = str);
    loadString(loader, "tooltipProjectedWinner", str -> TOOLTIP_PROJECTED_WINNER = str);
    loadString(loader, "tooltipAnimAutoPlayIsOn", str -> TOOLTIP_ANIM_AUTO_PLAY_IS_ON = str);
    loadString(loader, "tooltipAnimAutoPlayIsOff", str -> TOOLTIP_ANIM_AUTO_PLAY_IS_OFF = str);
    loadString(loader, "tooltipAnimClickToPlay", str -> TOOLTIP_ANIM_CLICK_TO_PLAY = str);
    loadString(loader, "tooltipAnimClickToStop", str -> TOOLTIP_ANIM_CLICK_TO_STOP = str);
    loadString(loader, "tooltipAnimSpeedIsNormal", str -> TOOLTIP_ANIM_SPEED_IS_NORMAL = str);
    loadString(loader, "tooltipAnimSpeedIsDouble", str -> TOOLTIP_ANIM_SPEED_IS_DOUBLE = str);
    loadString(loader, "victoryTargetPoints", str -> VICTORY_TARGET_POINTS = str);
    loadString(loader, "victoryInX", str -> VICTORY_IN_X = str);
    loadString(loader, "victoryTurnsRemaining", str -> VICTORY_TURNS_REMAINING = str);
    loadString(loader, "victorySolEmpty", str -> VICTORY_SOL_EMPTY = str);
    loadString(loader, "victorySolOwned", str -> VICTORY_SOL_OWNED = str);
  }

  private static byte[] load(final ResourceLoader loader, final String var0) {
    return loader.getResource("", var0);
  }

  private static void loadString(final ResourceLoader loader, final String key, final Consumer<String> setter) {
    final byte[] data = load(loader, key);
    if (data != null) {
      setter.accept(Strings.decode1252String(data));
    }
  }

  @SuppressWarnings("unused")
  public static final class AIMessage {
    public static final int NONE = -1;
    public static final int REJECT_TOO_STRONG = 0;
    public static final int REJECT_ENEMY_ALLY = 1;
    public static final int REJECT_TOO_WEAK = 2;
    public static final int REJECT_WANT_CAPTURE = 3;
    public static final int ACCEPT_HARMLESS = 4;
    public static final int ACCEPT_COMMON_ENEMY = 5;
    public static final int ACCEPT_NEUTRAL = 6;
    public static final int ACCEPT_INTIMIDATED = 7;
    public static final int REQUEST_COMMON_ENEMY = 8;
    public static final int REQUEST_LEADERS = 9;
    public static final int ACCEPTED_CEASE_CONFLICT = 10;
    public static final int ACCEPTED_COMMON_ENEMY = 11;
    public static final int ACCEPTED_COORDINATE = 12;
    public static final int AGGRESSIVE_1 = 13;
    public static final int AGGRESSIVE_2 = 14;
    public static final int DEFENSIVE_1 = 15;
    public static final int DEFENSIVE_2 = 16;
    public static final int OPTIMISTIC = 17;
    public static final int DO_NOT_INTERFERE = 18;
    public static final int ATTACK_SUCCESS = 19;
    public static final int ATTACK_FAILURE = 20;
    public static final int DEFENSE_SUCCESS = 21;
    public static final int ATTACK_MISTAKE = 22;
    public static final int WANT_SYSTEM = 23;
    public static final int CONFIDENT_THREAT = 24;
    public static final int ANGRY_WARNING = 25;
    public static final int ANGRY_PLEA = 26;
  }
}
